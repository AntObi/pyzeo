/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/area_and_volume.h",
            "src/channel.h",
            "src/cluster.h",
            "src/cycle.h",
            "src/feature.h",
            "src/geometry.h",
            "src/graphstorage.h",
            "src/holograms.h",
            "src/network.h",
            "src/networkinfo.h",
            "src/networkio.h",
            "src/networkstorage.h",
            "src/psd.h",
            "src/sphere_approx.h",
            "src/string_additions.h",
            "src/voronoicell.h"
        ],
        "extra_compile_args": [
            "-Wall",
            "-ansi",
            "-pedantic",
            "-O3"
        ],
        "include_dirs": [
            "src/pyzeo"
        ],
        "language": "c++",
        "name": "pyzeo.extension",
        "sources": [
            "src/pyzeo/extension.pyx",
            "src/area_and_volume.cc",
            "src/channel.cc",
            "src/cluster.cc",
            "src/cycle.cc",
            "src/grid.cc",
            "src/geometry.cc",
            "src/graphstorage.cc",
            "src/voro++/src/voro++.cc",
            "src/net.cc",
            "src/networkaccessibility.cc",
            "src/networkanalysis.cc",
            "src/networkstorage.cc",
            "src/networkinfo.cc",
            "src/network.cc",
            "src/networkio.cc",
            "src/material.cc",
            "src/mindist.cc",
            "src/OMS.cc",
            "src/psd.cc",
            "src/sphere_approx.cc",
            "src/string_additions.cc",
            "src/symbcalc.cc",
            "src/symmetry.cc",
            "src/ray.cc",
            "src/rmsd.cc",
            "src/voronoicell.cc",
            "src/v_network.cc"
        ]
    },
    "module_name": "pyzeo.extension"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyzeo__extension
#define __PYX_HAVE_API__pyzeo__extension
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string>
#include <vector>
#include <set>
#include "../geometry.h"
#include "../networkinfo.h"
#include "../channel.h"
#include "../psd.h"
#include "../networkio.h"
#include "../networkstorage.h"
#include "../network.h"
#include "../area_and_volume.h"
#include "../graphstorage.h"
#include "../voronoicell.h"
#include "../cycle.h"
#include "../cluster.h"
#include "../sphere_approx.h"
#include "../feature.h"
#include "../holograms.h"
#include "../string_additions.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "src/pyzeo/extension.pyx",
  "src/pyzeo/extension.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5pyzeo_9extension_Xyz;
struct __pyx_obj_5pyzeo_9extension_Point;
struct __pyx_obj_5pyzeo_9extension_Channel;
struct __pyx_obj_5pyzeo_9extension_Atom;
struct __pyx_obj_5pyzeo_9extension_AtomNetwork;
struct __pyx_obj_5pyzeo_9extension_VoronoiNode;
struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork;
struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork;
struct __pyx_obj_5pyzeo_9extension_VorFace;
struct __pyx_obj_5pyzeo_9extension_VorCell;
struct __pyx_obj_5pyzeo_9extension_BasicVCell;
struct __pyx_obj_5pyzeo_9extension_Cycle;
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition;
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr;

/* "pyzeo/extension.pxd":33
 * 
 * 
 * cdef class Xyz:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ XYZ class defined in geometry.h
 */
struct __pyx_obj_5pyzeo_9extension_Xyz {
  PyObject_HEAD
  XYZ *thisptr;
};


/* "pyzeo/extension.pxd":41
 * 
 * 
 * cdef class Point:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ Point class defined in geometry.h
 */
struct __pyx_obj_5pyzeo_9extension_Point {
  PyObject_HEAD
  Point *thisptr;
};


/* "pyzeo/extension.pxd":88
 *             vector[bint] *, vector[CHANNEL] *)
 * 
 * cdef class Channel:             # <<<<<<<<<<<<<<
 *     cdef CHANNEL* thisptr
 * 
 */
struct __pyx_obj_5pyzeo_9extension_Channel {
  PyObject_HEAD
  CHANNEL *thisptr;
};


/* "pyzeo/extension.pxd":209
 *             VORONOI_NETWORK* vornet, ATOM_NETWORK* atmnet)
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM class.
 */
struct __pyx_obj_5pyzeo_9extension_Atom {
  PyObject_HEAD
  ATOM *thisptr;
};


/* "pyzeo/extension.pxd":215
 *     cdef ATOM* thisptr
 * 
 * cdef class AtomNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM_NETWORK class.
 */
struct __pyx_obj_5pyzeo_9extension_AtomNetwork {
  PyObject_HEAD
  ATOM_NETWORK *thisptr;
  int rad_flag;
};


/* "pyzeo/extension.pxd":224
 *     cdef bint rad_flag
 * 
 * cdef class VoronoiNode:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VOR_NODE class.
 */
struct __pyx_obj_5pyzeo_9extension_VoronoiNode {
  PyObject_HEAD
  VOR_NODE *thisptr;
};


/* "pyzeo/extension.pxd":230
 *     cdef VOR_NODE* thisptr
 * 
 * cdef class VoronoiNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VORONOI_NETWORK class.
 */
struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork {
  PyObject_HEAD
  VORONOI_NETWORK *thisptr;
};


/* "pyzeo/extension.pxd":257
 * 
 * 
 * cdef class DijkstraNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ DIJKSTRA_NETWORK class.
 */
struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork {
  PyObject_HEAD
  DIJKSTRA_NETWORK *thisptr;
};


/* "pyzeo/extension.pxd":289
 * 
 * 
 * cdef class VorFace:             # <<<<<<<<<<<<<<
 *     cdef  VOR_FACE* thisptr
 * 
 */
struct __pyx_obj_5pyzeo_9extension_VorFace {
  PyObject_HEAD
  VOR_FACE *thisptr;
};


/* "pyzeo/extension.pxd":292
 *     cdef  VOR_FACE* thisptr
 * 
 * cdef class VorCell:             # <<<<<<<<<<<<<<
 *     cdef VOR_CELL* thisptr
 * 
 */
struct __pyx_obj_5pyzeo_9extension_VorCell {
  PyObject_HEAD
  VOR_CELL *thisptr;
};


/* "pyzeo/extension.pxd":295
 *     cdef VOR_CELL* thisptr
 * 
 * cdef class BasicVCell:             # <<<<<<<<<<<<<<
 *     cdef BASIC_VCELL* thisptr
 * 
 */
struct __pyx_obj_5pyzeo_9extension_BasicVCell {
  PyObject_HEAD
  BASIC_VCELL *thisptr;
};


/* "pyzeo/extension.pxd":313
 * 
 * 
 * cdef class Cycle:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ CYCLE class.
 */
struct __pyx_obj_5pyzeo_9extension_Cycle {
  PyObject_HEAD
  CYCLE *thisptr;
};


/* "pyzeo/extension.pyx":657
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition {
  PyObject_HEAD
  PyObject *__pyx_v_edge_center;
};


/* "pyzeo/extension.pyx":690
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */
struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *__pyx_outer_scope;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'pyzeo' */

/* Module declarations from 'pyzeo.extension' */
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_Xyz = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_Point = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_Channel = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_Atom = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_AtomNetwork = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_VoronoiNode = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_VoronoiNetwork = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_DijkstraNetwork = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_VorFace = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_VorCell = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_BasicVCell = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension_Cycle = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition = 0;
static PyTypeObject *__pyx_ptype_5pyzeo_9extension___pyx_scope_struct_1_genexpr = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "pyzeo.extension"
extern int __pyx_module_is_main_pyzeo__extension;
int __pyx_module_is_main_pyzeo__extension = 0;

/* Implementation of 'pyzeo.extension' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_HI[] = "HI";
static const char __pyx_k_S4[] = "S4";
static const char __pyx_k__3[] = "(";
static const char __pyx_k__4[] = ",";
static const char __pyx_k__5[] = ")";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_ACC[] = "ACC";
static const char __pyx_k_AQC[] = "AQC";
static const char __pyx_k_DDH[] = "DDH";
static const char __pyx_k_DEF[] = "DEF";
static const char __pyx_k_FCC[] = "FCC";
static const char __pyx_k_ICC[] = "ICC";
static const char __pyx_k_ICH[] = "ICH";
static const char __pyx_k_LOW[] = "LOW";
static const char __pyx_k_MED[] = "MED";
static const char __pyx_k_OCC[] = "OCC";
static const char __pyx_k_RIH[] = "RIH";
static const char __pyx_k_S10[] = "S10";
static const char __pyx_k_S20[] = "S20";
static const char __pyx_k_S30[] = "S30";
static const char __pyx_k_S40[] = "S40";
static const char __pyx_k_S50[] = "S50";
static const char __pyx_k_TIH[] = "TIH";
static const char __pyx_k_Xyz[] = "Xyz";
static const char __pyx_k__10[] = "";
static const char __pyx_k_ecs[] = "ecs";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fcs[] = "fcs";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_iit[] = "iit";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Atom[] = "Atom";
static const char __pyx_k_S100[] = "S100";
static const char __pyx_k_S500[] = "S500";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_objs[] = "objs";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Cycle[] = "Cycle";
static const char __pyx_k_Point[] = "Point";
static const char __pyx_k_S1000[] = "S1000";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_subNo[] = "subNo";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_S10000[] = "S10000";
static const char __pyx_k_atmnet[] = "atmnet";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_cycles[] = "cycles";
static const char __pyx_k_id_set[] = "id_set";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_minRad[] = "minRad";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sa_str[] = "sa_str";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_vornet[] = "vornet";
static const char __pyx_k_Channel[] = "Channel";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_VorCell[] = "VorCell";
static const char __pyx_k_VorFace[] = "VorFace";
static const char __pyx_k_WARNING[] = "WARNING";
static const char __pyx_k_acc_set[] = "acc_set";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_isMetal[] = "isMetal";
static const char __pyx_k_new_xyz[] = "new_xyz";
static const char __pyx_k_shift_x[] = "shift_x";
static const char __pyx_k_shift_y[] = "shift_y";
static const char __pyx_k_shift_z[] = "shift_z";
static const char __pyx_k_vol_str[] = "vol_str";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_c_atmnet[] = "c_atmnet";
static const char __pyx_k_cnd_file[] = "cnd_file";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_probeRad[] = "probeRad";
static const char __pyx_k_rad_file[] = "rad_file";
static const char __pyx_k_rad_flag[] = "rad_flag";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_vis_flag[] = "vis_flag";
static const char __pyx_k_xyz_list[] = "xyz_list";
static const char __pyx_k_xyz_vect[] = "xyz_vect";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_cpnt_file[] = "cpnt_file";
static const char __pyx_k_csph_file[] = "csph_file";
static const char __pyx_k_ha_atmnet[] = "ha_atmnet";
static const char __pyx_k_ha_vornet[] = "ha_vornet";
static const char __pyx_k_hist_file[] = "hist_file";
static const char __pyx_k_node_size[] = "node_size";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_BasicVCell[] = "BasicVCell";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_c_filename[] = "c_filename";
static const char __pyx_k_chist_file[] = "chist_file";
static const char __pyx_k_lookupMass[] = "lookupMass";
static const char __pyx_k_radialFlag[] = "radialFlag";
static const char __pyx_k_radialflag[] = "radialflag";
static const char __pyx_k_readV1file[] = "readV1file";
static const char __pyx_k_red_vornet[] = "red_vornet";
static const char __pyx_k_tmp_atmnet[] = "tmp_atmnet";
static const char __pyx_k_AtomNetwork[] = "AtomNetwork";
static const char __pyx_k_VoronoiNode[] = "VoronoiNode";
static const char __pyx_k_accuracy_kw[] = "_accuracy_kw";
static const char __pyx_k_atmnet_copy[] = "atmnet_copy";
static const char __pyx_k_c_atmnetptr[] = "c_atmnetptr";
static const char __pyx_k_c_vornetptr[] = "c_vornetptr";
static const char __pyx_k_points_file[] = "points_file";
static const char __pyx_k_readArcfile[] = "readArcfile";
static const char __pyx_k_readCiffile[] = "readCiffile";
static const char __pyx_k_readCucfile[] = "readCucfile";
static const char __pyx_k_writeV1file[] = "writeV1file";
static const char __pyx_k_c_atmnet_ptr[] = "c_atmnet_ptr";
static const char __pyx_k_c_vornet_ptr[] = "c_vornet_ptr";
static const char __pyx_k_ha_node_size[] = "ha_node_size";
static const char __pyx_k_lookupRadius[] = "lookupRadius";
static const char __pyx_k_probe_radius[] = "probe_radius";
static const char __pyx_k_readCssrfile[] = "readCssrfile";
static const char __pyx_k_readRadTable[] = "readRadTable";
static const char __pyx_k_read_from_V1[] = "read_from_V1";
static const char __pyx_k_saveVorCells[] = "saveVorCells";
static const char __pyx_k_surface_area[] = "surface_area";
static const char __pyx_k_writeCiffile[] = "writeCiffile";
static const char __pyx_k_writeNt2file[] = "writeNt2file";
static const char __pyx_k_writeVtkfile[] = "writeVtkfile";
static const char __pyx_k_writeXyzfile[] = "writeXyzfile";
static const char __pyx_k_centroid_list[] = "centroid_list";
static const char __pyx_k_cutoff_radius[] = "cutoff_radius";
static const char __pyx_k_high_accuracy[] = "high_accuracy";
static const char __pyx_k_pruned_vornet[] = "pruned_vornet";
static const char __pyx_k_readMassTable[] = "readMassTable";
static const char __pyx_k_read_from_ARC[] = "read_from_ARC";
static const char __pyx_k_read_from_CIF[] = "read_from_CIF";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_writeCssrfile[] = "writeCssrfile";
static const char __pyx_k_VoronoiNetwork[] = "VoronoiNetwork";
static const char __pyx_k_c_atmnetcp_ptr[] = "c_atmnetcp_ptr";
static const char __pyx_k_c_ha_atmnetptr[] = "c_ha_atmnetptr";
static const char __pyx_k_channel_radius[] = "channel_radius";
static const char __pyx_k_low_dist_range[] = "low_dist_range";
static const char __pyx_k_mc_sampling_no[] = "mc_sampling_no";
static const char __pyx_k_read_from_CSSR[] = "read_from_CSSR";
static const char __pyx_k_substituteSeed[] = "substituteSeed";
static const char __pyx_k_substitutionNo[] = "substitutionNo";
static const char __pyx_k_supercell_flag[] = "supercell_flag";
static const char __pyx_k_writeMopacfile[] = "writeMopacfile";
static const char __pyx_k_DijkstraNetwork[] = "DijkstraNetwork";
static const char __pyx_k_c_ha_vornet_ptr[] = "c_ha_vornet_ptr";
static const char __pyx_k_exclude_pockets[] = "exclude_pockets";
static const char __pyx_k_extended_output[] = "extended_output";
static const char __pyx_k_high_dist_range[] = "high_dist_range";
static const char __pyx_k_lookupCovRadius[] = "lookupCovRadius";
static const char __pyx_k_node_radii_file[] = "node_radii_file";
static const char __pyx_k_pyzeo_extension[] = "pyzeo.extension";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_No_high_accuracy[] = "No high accuracy";
static const char __pyx_k_accuracy_setting[] = "accuracy_setting";
static const char __pyx_k_c_org_atmnet_ptr[] = "c_org_atmnet_ptr";
static const char __pyx_k_sphere_dist_file[] = "sphere_dist_file";
static const char __pyx_k_substitute_atoms[] = "substitute_atoms";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_initializeRadTable[] = "initializeRadTable";
static const char __pyx_k_lookupAtomicNumber[] = "lookupAtomicNumber";
static const char __pyx_k_overlap_check_flag[] = "overlap_check_flag";
static const char __pyx_k_from_VoronoiNetwork[] = "from_VoronoiNetwork";
static const char __pyx_k_initializeMassTable[] = "initializeMassTable";
static const char __pyx_k_ret_high_acc_atmnet[] = "ret_high_acc_atmnet";
static const char __pyx_k_compute_face_centers[] = "compute_face_centers";
static const char __pyx_k_high_accuracy_atmnet[] = "high_accuracy_atmnet";
static const char __pyx_k_high_accuracy_atomnet[] = "high_accuracy_atomnet";
static const char __pyx_k_initializeCovRadTable[] = "initializeCovRadTable";
static const char __pyx_k_src_pyzeo_extension_pyx[] = "src/pyzeo/extension.pyx";
static const char __pyx_k_compute_centroid_4cycles[] = "compute_centroid_4cycles";
static const char __pyx_k_calc_pore_size_distribution[] = "calc_pore_size_distribution";
static const char __pyx_k_initializeAtomicNumberTable[] = "initializeAtomicNumberTable";
static const char __pyx_k_initializeAtomCharacterTable[] = "initializeAtomCharacterTable";
static const char __pyx_k_is_duplicate_perimeter_atoms[] = "is_duplicate_perimeter_atoms";
static const char __pyx_k_simplify_highaccuracy_vornet[] = "simplify_highaccuracy_vornet";
static const char __pyx_k_perform_voronoi_decomposition[] = "perform_voronoi_decomposition";
static const char __pyx_k_reduced_highaccuracy_vornodes[] = "reduced_highaccuracy_vornodes";
static const char __pyx_k_Accuracy_setting_not_understood[] = "Accuracy setting not understood";
static const char __pyx_k_This_value_is_not_supposed_to_be[] = "This value is not supposed to be modified";
static const char __pyx_k_generate_simplified_highaccuracy[] = "generate_simplified_highaccuracy_voronoi_network";
static const char __pyx_k_get_nearest_largest_diameter_hig[] = "get_nearest_largest_diameter_highaccuracy_vornode";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_perform_voronoi_decomposition_lo[] = "perform_voronoi_decomposition.<locals>.genexpr";
static const char __pyx_k_prune_voronoi_network_close_node[] = "prune_voronoi_network_close_node";
static const char __pyx_k_pruned_highaccuracy_voronoi_netw[] = "pruned_highaccuracy_voronoi_network";
static PyObject *__pyx_n_s_ACC;
static PyObject *__pyx_n_s_AQC;
static PyObject *__pyx_kp_s_Accuracy_setting_not_understood;
static PyObject *__pyx_n_s_Atom;
static PyObject *__pyx_n_s_AtomNetwork;
static PyObject *__pyx_n_s_BasicVCell;
static PyObject *__pyx_n_s_Channel;
static PyObject *__pyx_n_s_Cycle;
static PyObject *__pyx_n_s_DDH;
static PyObject *__pyx_n_s_DEF;
static PyObject *__pyx_n_s_DijkstraNetwork;
static PyObject *__pyx_n_s_FCC;
static PyObject *__pyx_n_s_HI;
static PyObject *__pyx_n_s_ICC;
static PyObject *__pyx_n_s_ICH;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_LOW;
static PyObject *__pyx_n_s_MED;
static PyObject *__pyx_kp_s_No_high_accuracy;
static PyObject *__pyx_n_s_OCC;
static PyObject *__pyx_n_s_Point;
static PyObject *__pyx_n_s_RIH;
static PyObject *__pyx_n_s_S10;
static PyObject *__pyx_n_s_S100;
static PyObject *__pyx_n_s_S1000;
static PyObject *__pyx_n_s_S10000;
static PyObject *__pyx_n_s_S20;
static PyObject *__pyx_n_s_S30;
static PyObject *__pyx_n_s_S4;
static PyObject *__pyx_n_s_S40;
static PyObject *__pyx_n_s_S50;
static PyObject *__pyx_n_s_S500;
static PyObject *__pyx_n_s_TIH;
static PyObject *__pyx_kp_s_This_value_is_not_supposed_to_be;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VorCell;
static PyObject *__pyx_n_s_VorFace;
static PyObject *__pyx_n_s_VoronoiNetwork;
static PyObject *__pyx_n_s_VoronoiNode;
static PyObject *__pyx_n_s_WARNING;
static PyObject *__pyx_n_s_Xyz;
static PyObject *__pyx_kp_s__10;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_n_s_acc_set;
static PyObject *__pyx_n_s_accuracy_kw;
static PyObject *__pyx_n_s_accuracy_setting;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_atmnet;
static PyObject *__pyx_n_s_atmnet_copy;
static PyObject *__pyx_n_s_c_atmnet;
static PyObject *__pyx_n_s_c_atmnet_ptr;
static PyObject *__pyx_n_s_c_atmnetcp_ptr;
static PyObject *__pyx_n_s_c_atmnetptr;
static PyObject *__pyx_n_s_c_filename;
static PyObject *__pyx_n_s_c_ha_atmnetptr;
static PyObject *__pyx_n_s_c_ha_vornet_ptr;
static PyObject *__pyx_n_s_c_org_atmnet_ptr;
static PyObject *__pyx_n_s_c_vornet_ptr;
static PyObject *__pyx_n_s_c_vornetptr;
static PyObject *__pyx_n_s_calc_pore_size_distribution;
static PyObject *__pyx_n_s_centroid_list;
static PyObject *__pyx_n_s_channel_radius;
static PyObject *__pyx_n_s_chist_file;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cnd_file;
static PyObject *__pyx_n_s_compute_centroid_4cycles;
static PyObject *__pyx_n_s_compute_face_centers;
static PyObject *__pyx_n_s_coords;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cpnt_file;
static PyObject *__pyx_n_s_csph_file;
static PyObject *__pyx_n_s_cutoff_radius;
static PyObject *__pyx_n_s_cycles;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_ecs;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exclude_pockets;
static PyObject *__pyx_n_s_extended_output;
static PyObject *__pyx_n_s_fcs;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_from_VoronoiNetwork;
static PyObject *__pyx_n_s_generate_simplified_highaccuracy;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_nearest_largest_diameter_hig;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ha_atmnet;
static PyObject *__pyx_n_s_ha_node_size;
static PyObject *__pyx_n_s_ha_vornet;
static PyObject *__pyx_n_s_high_accuracy;
static PyObject *__pyx_n_s_high_accuracy_atmnet;
static PyObject *__pyx_n_s_high_accuracy_atomnet;
static PyObject *__pyx_n_s_high_dist_range;
static PyObject *__pyx_n_s_hist_file;
static PyObject *__pyx_n_s_id_set;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_iit;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initializeAtomCharacterTable;
static PyObject *__pyx_n_s_initializeAtomicNumberTable;
static PyObject *__pyx_n_s_initializeCovRadTable;
static PyObject *__pyx_n_s_initializeMassTable;
static PyObject *__pyx_n_s_initializeRadTable;
static PyObject *__pyx_n_s_isMetal;
static PyObject *__pyx_n_s_is_duplicate_perimeter_atoms;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_lookupAtomicNumber;
static PyObject *__pyx_n_s_lookupCovRadius;
static PyObject *__pyx_n_s_lookupMass;
static PyObject *__pyx_n_s_lookupRadius;
static PyObject *__pyx_n_s_low_dist_range;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mc_sampling_no;
static PyObject *__pyx_n_s_minRad;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new_xyz;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node_radii_file;
static PyObject *__pyx_n_s_node_size;
static PyObject *__pyx_n_s_objs;
static PyObject *__pyx_n_s_overlap_check_flag;
static PyObject *__pyx_n_s_perform_voronoi_decomposition;
static PyObject *__pyx_n_s_perform_voronoi_decomposition_lo;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_points_file;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_probeRad;
static PyObject *__pyx_n_s_probe_radius;
static PyObject *__pyx_n_s_prune_voronoi_network_close_node;
static PyObject *__pyx_n_s_pruned_highaccuracy_voronoi_netw;
static PyObject *__pyx_n_s_pruned_vornet;
static PyObject *__pyx_n_s_pyzeo_extension;
static PyObject *__pyx_n_s_rad_file;
static PyObject *__pyx_n_s_rad_flag;
static PyObject *__pyx_n_s_radialFlag;
static PyObject *__pyx_n_s_radialflag;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_readArcfile;
static PyObject *__pyx_n_s_readCiffile;
static PyObject *__pyx_n_s_readCssrfile;
static PyObject *__pyx_n_s_readCucfile;
static PyObject *__pyx_n_s_readMassTable;
static PyObject *__pyx_n_s_readRadTable;
static PyObject *__pyx_n_s_readV1file;
static PyObject *__pyx_n_s_read_from_ARC;
static PyObject *__pyx_n_s_read_from_CIF;
static PyObject *__pyx_n_s_read_from_CSSR;
static PyObject *__pyx_n_s_read_from_V1;
static PyObject *__pyx_n_s_red_vornet;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reduced_highaccuracy_vornodes;
static PyObject *__pyx_n_s_ret_high_acc_atmnet;
static PyObject *__pyx_n_s_sa_str;
static PyObject *__pyx_n_s_saveVorCells;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shift_x;
static PyObject *__pyx_n_s_shift_y;
static PyObject *__pyx_n_s_shift_z;
static PyObject *__pyx_n_s_simplify_highaccuracy_vornet;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sphere_dist_file;
static PyObject *__pyx_kp_s_src_pyzeo_extension_pyx;
static PyObject *__pyx_n_s_subNo;
static PyObject *__pyx_n_s_substituteSeed;
static PyObject *__pyx_n_s_substitute_atoms;
static PyObject *__pyx_n_s_substitutionNo;
static PyObject *__pyx_n_s_supercell_flag;
static PyObject *__pyx_n_s_surface_area;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tmp_atmnet;
static PyObject *__pyx_n_s_vis_flag;
static PyObject *__pyx_n_s_vol_str;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_vornet;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_writeCiffile;
static PyObject *__pyx_n_s_writeCssrfile;
static PyObject *__pyx_n_s_writeMopacfile;
static PyObject *__pyx_n_s_writeNt2file;
static PyObject *__pyx_n_s_writeV1file;
static PyObject *__pyx_n_s_writeVtkfile;
static PyObject *__pyx_n_s_writeXyzfile;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xyz_list;
static PyObject *__pyx_n_s_xyz_vect;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static int __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z); /* proto */
static void __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_x_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_y_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_z_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_6scale(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point___cinit__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z); /* proto */
static void __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_6__repr__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1x___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_x_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1y___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_y_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1z___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_z_in); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_initializeRadTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_2initializeCovRadTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4initializeMassTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10readRadTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_12readMassTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14lookupRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_16lookupCovRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_18lookupMass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_22isMetal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element); /* proto */
static int __pyx_pf_5pyzeo_9extension_7Channel___cinit__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_24calc_pore_size_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_hist_file, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_points_file, PyObject *__pyx_v_node_radii_file, PyObject *__pyx_v_sphere_dist_file, PyObject *__pyx_v_vis_flag, PyObject *__pyx_v_overlap_check_flag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_26readCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_28readArcfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_30readCucfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_32readCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_34readV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_36writeCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_38writeCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_40writeV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_42writeNt2file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet, PyObject *__pyx_v_minRad); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_44writeXyzfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_46writeVtkfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_48writeMopacfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom___cinit__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_28calculate_free_sphere_parameters(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_30perform_voronoi_decomposition(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_50substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag); /* proto */
static int __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(PyTypeObject *__pyx_v_vornet); /* proto */
static void __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static int __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static void __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_52compute_centroid_4cycles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vornet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_54compute_face_centers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_56warning(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_objs); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_58simplify_highaccuracy_vornet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_60reduced_highaccuracy_vornodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_62pruned_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_64get_nearest_largest_diameter_highaccuracy_vornode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_66generate_simplified_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, CYTHON_UNUSED PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_68prune_voronoi_network_close_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_70volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_low_dist_range, PyObject *__pyx_v_high_dist_range); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_72surface_area(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_extended_output); /* proto */
static PyObject *__pyx_pf_5pyzeo_9extension_74high_accuracy_atomnet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_accuracy_setting); /* proto */
static PyObject *__pyx_tp_new_5pyzeo_9extension_Xyz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Point(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Channel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Atom(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_AtomNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_DijkstraNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VorFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_VorCell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_BasicVCell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension_Cycle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_0_6;
static PyObject *__pyx_float_0_7;
static PyObject *__pyx_float_0_25;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
/* Late includes */

/* "pyzeo/extension.pyx":19
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new XYZ(x,y,z)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 19, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 19, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 19, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 19, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz___cinit__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  XYZ *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":20
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):
 *         self.thisptr = new XYZ(x,y,z)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):
 */
  try {
    __pyx_t_1 = new XYZ(__pyx_v_x, __pyx_v_y, __pyx_v_z);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 20, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":19
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new XYZ(x,y,z)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":22
 *         self.thisptr = new XYZ(x,y,z)
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_x;
  CYTHON_UNUSED double __pyx_v_y;
  CYTHON_UNUSED double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 22, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 22, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 22, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 22, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 22, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":25
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_3Xyz_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":26
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property x:
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":25
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":29
 * 
 *     property x:
 *         def __get__(self): return self.thisptr.x             # <<<<<<<<<<<<<<
 *         def __set__(self, x_in): self.thisptr.x = x_in
 *     property y:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1x___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":30
 *     property x:
 *         def __get__(self): return self.thisptr.x
 *         def __set__(self, x_in): self.thisptr.x = x_in             # <<<<<<<<<<<<<<
 *     property y:
 *         def __get__(self): return self.thisptr.y
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_x_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 30, __pyx_L1_error)
  __pyx_v_self->thisptr->x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":32
 *         def __set__(self, x_in): self.thisptr.x = x_in
 *     property y:
 *         def __get__(self): return self.thisptr.y             # <<<<<<<<<<<<<<
 *         def __set__(self, y_in): self.thisptr.y = y_in
 *     property z:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1y___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":33
 *     property y:
 *         def __get__(self): return self.thisptr.y
 *         def __set__(self, y_in): self.thisptr.y = y_in             # <<<<<<<<<<<<<<
 *     property z:
 *         def __get__(self): return self.thisptr.z
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_y_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_y_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 33, __pyx_L1_error)
  __pyx_v_self->thisptr->y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":35
 *         def __set__(self, y_in): self.thisptr.y = y_in
 *     property z:
 *         def __get__(self): return self.thisptr.z             # <<<<<<<<<<<<<<
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_1z___get__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":36
 *     property z:
 *         def __get__(self): return self.thisptr.z
 *         def __set__(self, z_in): self.thisptr.z = z_in             # <<<<<<<<<<<<<<
 * 
 *     def scale(self, double factor):
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v_z_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_3Xyz_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_z_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_self->thisptr->z = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":38
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 *     def scale(self, double factor):             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_7scale(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_7scale(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor) {
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  assert(__pyx_arg_factor); {
    __pyx_v_factor = __pyx_PyFloat_AsDouble(__pyx_arg_factor); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 38, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.Xyz.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_6scale(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((double)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_6scale(struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, double __pyx_v_factor) {
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale", 0);

  /* "pyzeo/extension.pyx":39
 * 
 *     def scale(self, double factor):
 *         new_xyz = Xyz()             # <<<<<<<<<<<<<<
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 *         return new_xyz
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_Xyz)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_xyz = ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":40
 *     def scale(self, double factor):
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)             # <<<<<<<<<<<<<<
 *         return new_xyz
 * 
 */
  __pyx_v_self->thisptr->scale(__pyx_v_factor, __pyx_v_new_xyz->thisptr);

  /* "pyzeo/extension.pyx":41
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 *         return new_xyz             # <<<<<<<<<<<<<<
 * 
 * cdef class Point:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_xyz));
  __pyx_r = ((PyObject *)__pyx_v_new_xyz);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":38
 *         def __set__(self, z_in): self.thisptr.z = z_in
 * 
 *     def scale(self, double factor):             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         self.thisptr.scale(factor, new_xyz.thisptr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_3Xyz_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Xyz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":48
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CPoint(x,y,z)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point___cinit__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point___cinit__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Point *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":49
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):
 *         self.thisptr = new CPoint(x,y,z)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):
 */
  try {
    __pyx_t_1 = new Point(__pyx_v_x, __pyx_v_y, __pyx_v_z);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 49, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":48
 *     """
 * 
 *     def __cinit__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CPoint(x,y,z)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":51
 *         self.thisptr = new CPoint(x,y,z)
 * 
 *     def __init__(self, double x=0.0, double y=0.0, double z=0.0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_x;
  CYTHON_UNUSED double __pyx_v_y;
  CYTHON_UNUSED double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 51, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 51, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_2__init__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, CYTHON_UNUSED double __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":54
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_5Point_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":55
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":54
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":57
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_6__repr__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_6__repr__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pyzeo/extension.pyx":58
 * 
 *     def __repr__(self):
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'             # <<<<<<<<<<<<<<
 * 
 *     property x:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s__3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":57
 *         del self.thisptr
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "("+str(self.x)+','+str(self.y)+','+str(self.y)+')'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.Point.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":61
 * 
 *     property x:
 *         def __get__(self): return self.thisptr.vals[0]             # <<<<<<<<<<<<<<
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in
 *     property y:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1x___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1x___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":62
 *     property x:
 *         def __get__(self): return self.thisptr.vals[0]
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in             # <<<<<<<<<<<<<<
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_x_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1x_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_x_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[0]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":64
 *         def __set__(self, x_in): self.thisptr.vals[0] = x_in
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]             # <<<<<<<<<<<<<<
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in
 *     property z:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1y___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1y___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":65
 *     property y:
 *         def __get__(self): return self.thisptr.vals[1]
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in             # <<<<<<<<<<<<<<
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_y_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1y_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_y_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_y_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 65, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[1]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":67
 *         def __set__(self, y_in): self.thisptr.vals[1] = y_in
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]             # <<<<<<<<<<<<<<
 *         def __set__(self, z_in): self.thisptr.vals[2] = z_in
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1z___get__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_1z___get__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->thisptr->vals[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":68
 *     property z:
 *         def __get__(self): return self.thisptr.vals[2]
 *         def __set__(self, z_in): self.thisptr.vals[2] = z_in             # <<<<<<<<<<<<<<
 * 
 *     #def scale(self, double scaling_factor):
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in); /*proto*/
static int __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v_z_in));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_5Point_1z_2__set__(struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, PyObject *__pyx_v_z_in) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_z_in); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 68, __pyx_L1_error)
  (__pyx_v_self->thisptr->vals[2]) = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Point.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_5Point_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Point.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":76
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_1initializeRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_initializeRadTable[] = "\n    Populate the atomic radius table with Zeo++ default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_1initializeRadTable = {"initializeRadTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_1initializeRadTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_initializeRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_1initializeRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeRadTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_initializeRadTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_initializeRadTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeRadTable", 0);

  /* "pyzeo/extension.pyx":80
 *     Populate the atomic radius table with Zeo++ default values
 *     """
 *     zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeCovRadTable():
 */
  initializeRadTable();

  /* "pyzeo/extension.pyx":76
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":82
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_3initializeCovRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_2initializeCovRadTable[] = "\n    Populate the covalent tradius table with Zeo++ default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_3initializeCovRadTable = {"initializeCovRadTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_3initializeCovRadTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_2initializeCovRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_3initializeCovRadTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeCovRadTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_2initializeCovRadTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_2initializeCovRadTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeCovRadTable", 0);

  /* "pyzeo/extension.pyx":86
 *     Populate the covalent tradius table with Zeo++ default values
 *     """
 *     zeo_initializeCovRadTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeMassTable():
 */
  initializeCovRadTable();

  /* "pyzeo/extension.pyx":82
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":88
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_5initializeMassTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_4initializeMassTable[] = "\n    Populate the atomic mass table with Zeo++ default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_5initializeMassTable = {"initializeMassTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_5initializeMassTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_4initializeMassTable};
static PyObject *__pyx_pw_5pyzeo_9extension_5initializeMassTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeMassTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4initializeMassTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4initializeMassTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeMassTable", 0);

  /* "pyzeo/extension.pyx":92
 *     Populate the atomic mass table with Zeo++ default values
 *     """
 *     zeo_initializeMassTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeAtomCharacterTable():
 */
  initializeMassTable();

  /* "pyzeo/extension.pyx":88
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":94
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_6initializeAtomCharacterTable[] = "\n    Populate the Atom symbol table with Zeo++ default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_7initializeAtomCharacterTable = {"initializeAtomCharacterTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_6initializeAtomCharacterTable};
static PyObject *__pyx_pw_5pyzeo_9extension_7initializeAtomCharacterTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomCharacterTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_6initializeAtomCharacterTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomCharacterTable", 0);

  /* "pyzeo/extension.pyx":98
 *     Populate the Atom symbol table with Zeo++ default values
 *     """
 *     zeo_initializeAtomCharacterTable()             # <<<<<<<<<<<<<<
 * 
 * def initializeAtomicNumberTable():
 */
  initializeAtomCharacterTable();

  /* "pyzeo/extension.pyx":94
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":100
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_8initializeAtomicNumberTable[] = "\n    Populate the atomic number table with Zeo++ default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_9initializeAtomicNumberTable = {"initializeAtomicNumberTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable, METH_NOARGS, __pyx_doc_5pyzeo_9extension_8initializeAtomicNumberTable};
static PyObject *__pyx_pw_5pyzeo_9extension_9initializeAtomicNumberTable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomicNumberTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_8initializeAtomicNumberTable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeAtomicNumberTable", 0);

  /* "pyzeo/extension.pyx":104
 *     Populate the atomic number table with Zeo++ default values
 *     """
 *     zeo_initializeAtomicNumberTable()             # <<<<<<<<<<<<<<
 * 
 * def readRadTable(filename):
 */
  initializeAtomicNumberTable();

  /* "pyzeo/extension.pyx":100
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":106
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11readRadTable(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_10readRadTable[] = "\n    Read atomic radii values from input file and replace the default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_11readRadTable = {"readRadTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_11readRadTable, METH_O, __pyx_doc_5pyzeo_9extension_10readRadTable};
static PyObject *__pyx_pw_5pyzeo_9extension_11readRadTable(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readRadTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_10readRadTable(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10readRadTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readRadTable", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":110
 *     Read atomic radii values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":111
 *     """
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     zeo_readRadTable(c_filename)
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 111, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":110
 *     Read atomic radii values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":112
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     zeo_readRadTable(c_filename)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 112, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":113
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     zeo_readRadTable(c_filename)             # <<<<<<<<<<<<<<
 * 
 * def readMassTable(filename):
 */
  readRadTable(__pyx_v_c_filename);

  /* "pyzeo/extension.pyx":106
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readRadTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":115
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_13readMassTable(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_12readMassTable[] = "\n    Read atomic mass values from input file and replace the default values\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_13readMassTable = {"readMassTable", (PyCFunction)__pyx_pw_5pyzeo_9extension_13readMassTable, METH_O, __pyx_doc_5pyzeo_9extension_12readMassTable};
static PyObject *__pyx_pw_5pyzeo_9extension_13readMassTable(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readMassTable (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_12readMassTable(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_12readMassTable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readMassTable", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":119
 *     Read atomic mass values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":120
 *     """
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     zeo_readMassTable(c_filename)
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 120, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":119
 *     Read atomic mass values from input file and replace the default values
 *     """
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":121
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     zeo_readMassTable(c_filename)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 121, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":122
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     zeo_readMassTable(c_filename)             # <<<<<<<<<<<<<<
 * 
 * def lookupRadius(element):
 */
  readMassTable(__pyx_v_c_filename);

  /* "pyzeo/extension.pyx":115
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.readMassTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":124
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15lookupRadius(PyObject *__pyx_self, PyObject *__pyx_v_element); /*proto*/
static char __pyx_doc_5pyzeo_9extension_14lookupRadius[] = "\"\n    Args:\n        element:\n            Element name in conventional shorthand \n            Ex: Al for aluminum \n                Si for silicon \n    Returns:\n        radius of the input element\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_15lookupRadius = {"lookupRadius", (PyCFunction)__pyx_pw_5pyzeo_9extension_15lookupRadius, METH_O, __pyx_doc_5pyzeo_9extension_14lookupRadius};
static PyObject *__pyx_pw_5pyzeo_9extension_15lookupRadius(PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupRadius (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_14lookupRadius(__pyx_self, ((PyObject *)__pyx_v_element));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14lookupRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  double __pyx_v_radius;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupRadius", 0);

  /* "pyzeo/extension.pyx":134
 *         radius of the input element
 *     """
 *     radius = zeo_lookupRadius(element, True)             # <<<<<<<<<<<<<<
 *     return radius
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 134, __pyx_L1_error)
  __pyx_v_radius = lookupRadius(__pyx_t_1, 1);

  /* "pyzeo/extension.pyx":135
 *     """
 *     radius = zeo_lookupRadius(element, True)
 *     return radius             # <<<<<<<<<<<<<<
 * 
 * def lookupCovRadius(element):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_radius); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":124
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":137
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_17lookupCovRadius(PyObject *__pyx_self, PyObject *__pyx_v_element); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_17lookupCovRadius = {"lookupCovRadius", (PyCFunction)__pyx_pw_5pyzeo_9extension_17lookupCovRadius, METH_O, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_17lookupCovRadius(PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupCovRadius (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_16lookupCovRadius(__pyx_self, ((PyObject *)__pyx_v_element));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_16lookupCovRadius(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupCovRadius", 0);

  /* "pyzeo/extension.pyx":138
 * 
 * def lookupCovRadius(element):
 *     return zeo_lookupCovRadius(element)             # <<<<<<<<<<<<<<
 * 
 * def lookupMass(element):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 138, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(lookupCovRadius(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":137
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupCovRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":140
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_19lookupMass(PyObject *__pyx_self, PyObject *__pyx_v_element); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_19lookupMass = {"lookupMass", (PyCFunction)__pyx_pw_5pyzeo_9extension_19lookupMass, METH_O, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_19lookupMass(PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupMass (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_18lookupMass(__pyx_self, ((PyObject *)__pyx_v_element));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_18lookupMass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupMass", 0);

  /* "pyzeo/extension.pyx":141
 * 
 * def lookupMass(element):
 *     return zeo_lookupMass(element)             # <<<<<<<<<<<<<<
 * 
 * def lookupAtomicNumber(element):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(lookupMass(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":140
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":143
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber(PyObject *__pyx_self, PyObject *__pyx_v_element); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_21lookupAtomicNumber = {"lookupAtomicNumber", (PyCFunction)__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber, METH_O, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_21lookupAtomicNumber(PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookupAtomicNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(__pyx_self, ((PyObject *)__pyx_v_element));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_20lookupAtomicNumber(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookupAtomicNumber", 0);

  /* "pyzeo/extension.pyx":144
 * 
 * def lookupAtomicNumber(element):
 *     return zeo_lookupAtomicNumber(element)             # <<<<<<<<<<<<<<
 * 
 * def isMetal(element):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(lookupAtomicNumber(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":143
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.lookupAtomicNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":146
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_23isMetal(PyObject *__pyx_self, PyObject *__pyx_v_element); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_23isMetal = {"isMetal", (PyCFunction)__pyx_pw_5pyzeo_9extension_23isMetal, METH_O, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_23isMetal(PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isMetal (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_22isMetal(__pyx_self, ((PyObject *)__pyx_v_element));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_22isMetal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isMetal", 0);

  /* "pyzeo/extension.pyx":147
 * 
 * def isMetal(element):
 *     return zeo_isMetal(element)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(isMetal(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":146
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.isMetal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":155
 *     Python wrapper to Zeo++ Channel.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel___cinit__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7Channel___cinit__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  CHANNEL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":156
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  try {
    __pyx_t_1 = new CHANNEL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 156, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":155
 *     Python wrapper to Zeo++ Channel.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Channel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":157
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_7Channel_2__dealloc__(struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":158
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":157
 *     def __cinit__(self):
 *         self.thisptr = new CHANNEL()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel_4__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Channel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_7Channel_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_7Channel_6__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Channel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7Channel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Channel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Channel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":162
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_25calc_pore_size_distribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_24calc_pore_size_distribution[] = "\n    Computes the pore size distribution histogram\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        hist_file:\n           File to store the histogram\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        points_file (Default=None):\n            File to store the points. Used in visualization\n        node_radii_file (Default=None):\n            File to store the node radi. Used in visualizationi\n        sphere_dist_file (Default=None):\n            Reserved for future use\n        vis_flag (Default=False)\n            Visualization Flag\n        overlap_check_flag (Default=False)\n            VisIT Visualization related Flag\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_25calc_pore_size_distribution = {"calc_pore_size_distribution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_25calc_pore_size_distribution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_24calc_pore_size_distribution};
static PyObject *__pyx_pw_5pyzeo_9extension_25calc_pore_size_distribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_hist_file = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_points_file = 0;
  PyObject *__pyx_v_node_radii_file = 0;
  PyObject *__pyx_v_sphere_dist_file = 0;
  PyObject *__pyx_v_vis_flag = 0;
  PyObject *__pyx_v_overlap_check_flag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_pore_size_distribution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_channel_radius,&__pyx_n_s_probe_radius,&__pyx_n_s_mc_sampling_no,&__pyx_n_s_hist_file,&__pyx_n_s_high_accuracy,&__pyx_n_s_exclude_pockets,&__pyx_n_s_points_file,&__pyx_n_s_node_radii_file,&__pyx_n_s_sphere_dist_file,&__pyx_n_s_vis_flag,&__pyx_n_s_overlap_check_flag,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

    /* "pyzeo/extension.pyx":163
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,             # <<<<<<<<<<<<<<
 *         points_file="", node_radii_file="", sphere_dist_file="",
 *         vis_flag=False, overlap_check_flag=False):
 */
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)__pyx_kp_s__10);
    values[8] = ((PyObject *)__pyx_kp_s__10);
    values[9] = ((PyObject *)__pyx_kp_s__10);

    /* "pyzeo/extension.pyx":165
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 *         vis_flag=False, overlap_check_flag=False):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the pore size distribution histogram
 */
    values[10] = ((PyObject *)Py_False);
    values[11] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_channel_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, 1); __PYX_ERR(1, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probe_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, 2); __PYX_ERR(1, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mc_sampling_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, 3); __PYX_ERR(1, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hist_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, 4); __PYX_ERR(1, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_accuracy);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_pockets);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points_file);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_radii_file);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sphere_dist_file);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vis_flag);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_overlap_check_flag);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_pore_size_distribution") < 0)) __PYX_ERR(1, 162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_hist_file = values[4];
    __pyx_v_high_accuracy = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_points_file = values[7];
    __pyx_v_node_radii_file = values[8];
    __pyx_v_sphere_dist_file = values[9];
    __pyx_v_vis_flag = values[10];
    __pyx_v_overlap_check_flag = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_pore_size_distribution", 0, 5, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.calc_pore_size_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_24calc_pore_size_distribution(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_hist_file, __pyx_v_high_accuracy, __pyx_v_exclude_pockets, __pyx_v_points_file, __pyx_v_node_radii_file, __pyx_v_sphere_dist_file, __pyx_v_vis_flag, __pyx_v_overlap_check_flag);

  /* "pyzeo/extension.pyx":162
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_24calc_pore_size_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_hist_file, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_points_file, PyObject *__pyx_v_node_radii_file, PyObject *__pyx_v_sphere_dist_file, PyObject *__pyx_v_vis_flag, PyObject *__pyx_v_overlap_check_flag) {
  PyObject *__pyx_v_atmnet_copy = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnetcp_ptr;
  std::string __pyx_v_chist_file;
  std::string __pyx_v_cpnt_file;
  std::string __pyx_v_cnd_file;
  std::string __pyx_v_csph_file;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  ATOM_NETWORK *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_pore_size_distribution", 0);

  /* "pyzeo/extension.pyx":194
 *             VisIT Visualization related Flag
 *     """
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()             # <<<<<<<<<<<<<<
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 194, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_atmnet_copy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":195
 *     """
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 195, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":196
 *     atmnet_copy = (<AtomNetwork?>atmnet).copy()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr             # <<<<<<<<<<<<<<
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet_copy, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet_copy)->thisptr;
  __pyx_v_c_atmnetcp_ptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":197
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file             # <<<<<<<<<<<<<<
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_hist_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_v_chist_file = __pyx_t_5;

  /* "pyzeo/extension.pyx":198
 *     c_atmnetcp_ptr = (<AtomNetwork?>atmnet_copy).thisptr
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file             # <<<<<<<<<<<<<<
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_points_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L1_error)
  __pyx_v_cpnt_file = __pyx_t_5;

  /* "pyzeo/extension.pyx":199
 *     cdef string chist_file = hist_file
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file             # <<<<<<<<<<<<<<
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_node_radii_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_v_cnd_file = __pyx_t_5;

  /* "pyzeo/extension.pyx":200
 *     cdef string cpnt_file = points_file
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file             # <<<<<<<<<<<<<<
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_sphere_dist_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L1_error)
  __pyx_v_csph_file = __pyx_t_5;

  /* "pyzeo/extension.pyx":201
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 201, __pyx_L1_error)

  /* "pyzeo/extension.pyx":202
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 *               overlap_check_flag)
 */
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)

  /* "pyzeo/extension.pyx":203
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,             # <<<<<<<<<<<<<<
 *               overlap_check_flag)
 * 
 */
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_vis_flag); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L1_error)

  /* "pyzeo/extension.pyx":204
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 *               overlap_check_flag)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_overlap_check_flag); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 204, __pyx_L1_error)

  /* "pyzeo/extension.pyx":201
 *     cdef string cnd_file = node_radii_file
 *     cdef string csph_file = sphere_dist_file
 *     c_calcPoreSizeDistr (c_atmnetcp_ptr, c_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *               channel_radius,  probe_radius, mc_sampling_no, exclude_pockets,
 *               chist_file, cpnt_file, cnd_file, csph_file, vis_flag,
 */
  calcPoreSizeDistr(__pyx_v_c_atmnetcp_ptr, __pyx_v_c_atmnet_ptr, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_v_chist_file, __pyx_v_cpnt_file, __pyx_v_cnd_file, __pyx_v_csph_file, __pyx_t_11, __pyx_t_12);

  /* "pyzeo/extension.pyx":162
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.calc_pore_size_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atmnet_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":208
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_27readCiffile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_27readCiffile = {"readCiffile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_27readCiffile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_27readCiffile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCiffile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radialflag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialflag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readCiffile", 1, 2, 2, 1); __PYX_ERR(1, 208, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readCiffile") < 0)) __PYX_ERR(1, 208, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCiffile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.readCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_26readCiffile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_26readCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCiffile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":209
 * # netio
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":210
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":211
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 211, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":210
 * def readCiffile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":212
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 212, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":213
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 213, __pyx_L1_error)
  __pyx_t_2 = ((!(readCIFFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_3) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":214
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 214, __pyx_L1_error)

    /* "pyzeo/extension.pyx":213
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet
 */
  }

  /* "pyzeo/extension.pyx":215
 *     if not  readCIFFile(c_filename, atmnet.thisptr, radialflag):
 *         raise ValueError        # Find the appropriate error and return it
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readArcfile(filename, radialflag):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":208
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.readCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":217
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_29readArcfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_29readArcfile = {"readArcfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_29readArcfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_29readArcfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readArcfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radialflag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialflag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readArcfile", 1, 2, 2, 1); __PYX_ERR(1, 217, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readArcfile") < 0)) __PYX_ERR(1, 217, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readArcfile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.readArcfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_28readArcfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_28readArcfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readArcfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":218
 * 
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":219
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":220
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 220, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":219
 * def readArcfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":221
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 221, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":222
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 222, __pyx_L1_error)
  __pyx_t_2 = ((!(readARCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_3) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":223
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 223, __pyx_L1_error)

    /* "pyzeo/extension.pyx":222
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  }

  /* "pyzeo/extension.pyx":224
 *     if not readARCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readCucfile(filename, radialflag):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":217
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.readArcfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":226
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_31readCucfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_31readCucfile = {"readCucfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_31readCucfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_31readCucfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCucfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radialflag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialflag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readCucfile", 1, 2, 2, 1); __PYX_ERR(1, 226, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readCucfile") < 0)) __PYX_ERR(1, 226, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCucfile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.readCucfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_30readCucfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_30readCucfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCucfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":227
 * 
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":228
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":229
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 229, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":228
 * def readCucfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":230
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":231
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 231, __pyx_L1_error)
  __pyx_t_2 = ((!(readCUCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_3) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":232
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 232, __pyx_L1_error)

    /* "pyzeo/extension.pyx":231
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  }

  /* "pyzeo/extension.pyx":233
 *     if not readCUCFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readCssrfile(filename, radialflag):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":226
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.readCucfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":235
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_33readCssrfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_33readCssrfile = {"readCssrfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_33readCssrfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_33readCssrfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCssrfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radialflag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialflag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readCssrfile", 1, 2, 2, 1); __PYX_ERR(1, 235, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readCssrfile") < 0)) __PYX_ERR(1, 235, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCssrfile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.readCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_32readCssrfile(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_32readCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCssrfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":236
 * 
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":237
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":238
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 238, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":237
 * def readCssrfile(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":239
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 239, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":240
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 240, __pyx_L1_error)
  __pyx_t_2 = ((!(readCSSRFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_3) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":241
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 241, __pyx_L1_error)

    /* "pyzeo/extension.pyx":240
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  }

  /* "pyzeo/extension.pyx":242
 *     if not readCSSRFile(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def readV1file(filename, radialflag):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":235
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.readCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":244
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_35readV1file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_35readV1file = {"readV1file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_35readV1file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_35readV1file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radialflag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readV1file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radialflag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialflag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readV1file", 1, 2, 2, 1); __PYX_ERR(1, 244, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readV1file") < 0)) __PYX_ERR(1, 244, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_radialflag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readV1file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 244, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.readV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_34readV1file(__pyx_self, __pyx_v_filename, __pyx_v_radialflag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_34readV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_radialflag) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readV1file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":245
 * 
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":246
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":247
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 247, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":246
 * def readV1file(filename, radialflag):
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":248
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":249
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radialflag); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L1_error)
  __pyx_t_2 = ((!(readV1File(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_3) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":250
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError             # <<<<<<<<<<<<<<
 *     return atmnet
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 250, __pyx_L1_error)

    /* "pyzeo/extension.pyx":249
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):             # <<<<<<<<<<<<<<
 *         raise IOError
 *     return atmnet
 */
  }

  /* "pyzeo/extension.pyx":251
 *     if not readV1File(c_filename, atmnet.thisptr, radialflag):
 *         raise IOError
 *     return atmnet             # <<<<<<<<<<<<<<
 * 
 * def writeCssrfile(filename, atmnet):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":244
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.readV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":253
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_37writeCssrfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_37writeCssrfile = {"writeCssrfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_37writeCssrfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_37writeCssrfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCssrfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeCssrfile", 1, 2, 2, 1); __PYX_ERR(1, 253, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeCssrfile") < 0)) __PYX_ERR(1, 253, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeCssrfile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_36writeCssrfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_36writeCssrfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCssrfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":254
 * 
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":255
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 255, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":254
 * 
 * def writeCssrfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":256
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 256, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":257
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToCSSR(c_filename, c_atmnet):
 *         raise IOError
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":258
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCSSR(__pyx_v_c_filename, __pyx_v_c_atmnet) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":259
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeCiffile(filename, atmnet):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 259, __pyx_L1_error)

    /* "pyzeo/extension.pyx":258
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCSSR(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":253
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeCssrfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":261
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_39writeCiffile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_39writeCiffile = {"writeCiffile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_39writeCiffile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_39writeCiffile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCiffile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeCiffile", 1, 2, 2, 1); __PYX_ERR(1, 261, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeCiffile") < 0)) __PYX_ERR(1, 261, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeCiffile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 261, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_38writeCiffile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_38writeCiffile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCiffile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":262
 * 
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":263
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 263, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":262
 * 
 * def writeCiffile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":264
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 264, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":265
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToCIF(c_filename, c_atmnet):
 *         raise IOError
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 265, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":266
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCIF(__pyx_v_c_filename, __pyx_v_c_atmnet) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":267
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeV1file(filename, atmnet):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 267, __pyx_L1_error)

    /* "pyzeo/extension.pyx":266
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToCIF(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":261
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeCiffile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":269
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_41writeV1file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_41writeV1file = {"writeV1file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_41writeV1file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_41writeV1file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeV1file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeV1file", 1, 2, 2, 1); __PYX_ERR(1, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeV1file") < 0)) __PYX_ERR(1, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeV1file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_40writeV1file(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_40writeV1file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeV1file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":270
 * 
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":271
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 271, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":270
 * 
 * def writeV1file(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":272
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":273
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToV1(c_filename, c_atmnet):
 *         raise IOError
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 273, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":274
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToV1(__pyx_v_c_filename, __pyx_v_c_atmnet) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":275
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeNt2file(filename, vornet, minRad = None):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 275, __pyx_L1_error)

    /* "pyzeo/extension.pyx":274
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToV1(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":269
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeV1file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":277
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_43writeNt2file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_43writeNt2file = {"writeNt2file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_43writeNt2file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_43writeNt2file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_vornet = 0;
  PyObject *__pyx_v_minRad = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeNt2file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_vornet,&__pyx_n_s_minRad,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vornet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeNt2file", 0, 2, 3, 1); __PYX_ERR(1, 277, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minRad);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeNt2file") < 0)) __PYX_ERR(1, 277, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_vornet = values[1];
    __pyx_v_minRad = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeNt2file", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeNt2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_42writeNt2file(__pyx_self, __pyx_v_filename, __pyx_v_vornet, __pyx_v_minRad);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_42writeNt2file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet, PyObject *__pyx_v_minRad) {
  char *__pyx_v_c_filename;
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  VORONOI_NETWORK *__pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeNt2file", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":278
 * 
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":279
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 279, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":278
 * 
 * def writeNt2file(filename, vornet, minRad = None):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":280
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":281
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 281, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_5;

  /* "pyzeo/extension.pyx":282
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:             # <<<<<<<<<<<<<<
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_minRad); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 282, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":283
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):             # <<<<<<<<<<<<<<
 *             raise IOError
 *     else:
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_minRad); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 283, __pyx_L1_error)
    __pyx_t_2 = ((!(writeToNt2(__pyx_v_c_filename, __pyx_v_c_vornet_ptr, __pyx_t_6) != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "pyzeo/extension.pyx":284
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError             # <<<<<<<<<<<<<<
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):
 */
      __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
      __PYX_ERR(1, 284, __pyx_L1_error)

      /* "pyzeo/extension.pyx":283
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):             # <<<<<<<<<<<<<<
 *             raise IOError
 *     else:
 */
    }

    /* "pyzeo/extension.pyx":282
 *     cdef char* c_filename = filename
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     if minRad:             # <<<<<<<<<<<<<<
 *         if not writeToNt2(c_filename, c_vornet_ptr, minRad):
 *             raise IOError
 */
    goto __pyx_L4;
  }

  /* "pyzeo/extension.pyx":286
 *             raise IOError
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  /*else*/ {
    __pyx_t_2 = ((!(writeToNt2(__pyx_v_c_filename, __pyx_v_c_vornet_ptr) != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "pyzeo/extension.pyx":287
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 */
      __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
      __PYX_ERR(1, 287, __pyx_L1_error)

      /* "pyzeo/extension.pyx":286
 *             raise IOError
 *     else:
 *         if not writeToNt2(c_filename, c_vornet_ptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
    }
  }
  __pyx_L4:;

  /* "pyzeo/extension.pyx":277
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeNt2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":289
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_45writeXyzfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_45writeXyzfile = {"writeXyzfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_45writeXyzfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_45writeXyzfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_v_is_duplicate_perimeter_atoms = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeXyzfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,&__pyx_n_s_supercell_flag,&__pyx_n_s_is_duplicate_perimeter_atoms,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, 1); __PYX_ERR(1, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, 2); __PYX_ERR(1, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_duplicate_perimeter_atoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, 3); __PYX_ERR(1, 289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeXyzfile") < 0)) __PYX_ERR(1, 289, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
    __pyx_v_supercell_flag = values[2];
    __pyx_v_is_duplicate_perimeter_atoms = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeXyzfile", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeXyzfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_44writeXyzfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet, __pyx_v_supercell_flag, __pyx_v_is_duplicate_perimeter_atoms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_44writeXyzfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeXyzfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":290
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":291
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 291, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":290
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":292
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":293
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 293, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":294
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 294, __pyx_L1_error)

  /* "pyzeo/extension.pyx":295
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_duplicate_perimeter_atoms); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 295, __pyx_L1_error)

  /* "pyzeo/extension.pyx":294
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
 */
  __pyx_t_6 = ((!(writeToXYZ(__pyx_v_c_filename, __pyx_v_c_atmnet, __pyx_t_2, __pyx_t_1) != 0)) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "pyzeo/extension.pyx":296
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,
 *             is_duplicate_perimeter_atoms):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeVtkfile(filename, atmnet):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 296, __pyx_L1_error)

    /* "pyzeo/extension.pyx":294
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToXYZ(c_filename, c_atmnet, supercell_flag,             # <<<<<<<<<<<<<<
 *             is_duplicate_perimeter_atoms):
 *         raise IOError
 */
  }

  /* "pyzeo/extension.pyx":289
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeXyzfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":298
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_47writeVtkfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_47writeVtkfile = {"writeVtkfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_47writeVtkfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_47writeVtkfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeVtkfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeVtkfile", 1, 2, 2, 1); __PYX_ERR(1, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeVtkfile") < 0)) __PYX_ERR(1, 298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeVtkfile", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeVtkfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_46writeVtkfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_46writeVtkfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeVtkfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":299
 * 
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":300
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 300, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":299
 * 
 * def writeVtkfile(filename, atmnet):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":301
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 301, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":302
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToVTK(c_filename, c_atmnet):
 *         raise IOError
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 302, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":303
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToVTK(__pyx_v_c_filename, __pyx_v_c_atmnet) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":304
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 304, __pyx_L1_error)

    /* "pyzeo/extension.pyx":303
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToVTK(c_filename, c_atmnet):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":298
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeVtkfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":306
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_49writeMopacfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_49writeMopacfile = {"writeMopacfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_49writeMopacfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_49writeMopacfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeMopacfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_atmnet,&__pyx_n_s_supercell_flag,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeMopacfile", 1, 3, 3, 1); __PYX_ERR(1, 306, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeMopacfile", 1, 3, 3, 2); __PYX_ERR(1, 306, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeMopacfile") < 0)) __PYX_ERR(1, 306, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = values[0];
    __pyx_v_atmnet = values[1];
    __pyx_v_supercell_flag = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMopacfile", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 306, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.writeMopacfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_48writeMopacfile(__pyx_self, __pyx_v_filename, __pyx_v_atmnet, __pyx_v_supercell_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_48writeMopacfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_supercell_flag) {
  char *__pyx_v_c_filename;
  ATOM_NETWORK *__pyx_v_c_atmnet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  ATOM_NETWORK *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeMopacfile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":307
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":308
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 308, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":307
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 */
  }

  /* "pyzeo/extension.pyx":309
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 309, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":310
 *         filename = (<unicode>filename).encode('utf8')
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
 *         raise IOError
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 310, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet = __pyx_t_5;

  /* "pyzeo/extension.pyx":311
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 311, __pyx_L1_error)
  __pyx_t_1 = ((!(writeToMOPAC(__pyx_v_c_filename, __pyx_v_c_atmnet, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":312
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):
 *         raise IOError             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 312, __pyx_L1_error)

    /* "pyzeo/extension.pyx":311
 *     cdef char* c_filename = filename
 *     cdef ATOM_NETWORK* c_atmnet = (<AtomNetwork?>atmnet).thisptr
 *     if not writeToMOPAC(c_filename, c_atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *         raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":306
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.writeMopacfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":321
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom___cinit__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom___cinit__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ATOM *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":322
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new ATOM()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new ATOM();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 322, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":321
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Atom.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":324
 *         self.thisptr = new ATOM()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_2__init__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":327
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_4Atom_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":328
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property coords:
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":327
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":331
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6coords___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzeo/extension.pyx":332
 *     property coords:
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyList_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_coords = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":333
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":331
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzeo.extension.Atom.coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":334
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":338
 *             This variable is not supposed to be modified manually
 *             """
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 338, __pyx_L1_error)

  /* "pyzeo/extension.pyx":339
 *             """
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_2;

  /* "pyzeo/extension.pyx":340
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_2;

  /* "pyzeo/extension.pyx":341
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property radius:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_2;

  /* "pyzeo/extension.pyx":334
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Atom.coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":344
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.radius             # <<<<<<<<<<<<<<
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6radius___get__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Atom.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":345
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius); /*proto*/
static int __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_4Atom_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":346
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.radius = radius
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 346, __pyx_L1_error)

  /* "pyzeo/extension.pyx":347
 *         def __set__(self, radius):
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L1_error)
  __pyx_v_self->thisptr->radius = __pyx_t_1;

  /* "pyzeo/extension.pyx":345
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.Atom.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Atom.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_Atom *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.Atom.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":357
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11AtomNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":358
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new ATOM_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new ATOM_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 358, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":357
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":360
 *         self.thisptr = new ATOM_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":363
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_11AtomNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":364
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":363
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":366
 *         del self.thisptr
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_6copy[] = "\n        Create a copy of the AtomNetwork instance\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_6copy(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_newatmnet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyzeo/extension.pyx":370
 *         Create a copy of the AtomNetwork instance
 *         """
 *         newatmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_newatmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":371
 *         """
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)             # <<<<<<<<<<<<<<
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet
 */
  __pyx_v_self->thisptr->copy(__pyx_v_newatmnet->thisptr);

  /* "pyzeo/extension.pyx":372
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag             # <<<<<<<<<<<<<<
 *         return newatmnet
 * 
 */
  __pyx_t_2 = __pyx_v_self->rad_flag;
  __pyx_v_newatmnet->rad_flag = __pyx_t_2;

  /* "pyzeo/extension.pyx":373
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet             # <<<<<<<<<<<<<<
 * 
 *     #def relative_to_absolute(self, point):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newatmnet));
  __pyx_r = ((PyObject *)__pyx_v_newatmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":366
 *         del self.thisptr
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newatmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":391
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_8read_from_CIF[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CIF file.\n        Arguments:\n            filename: \n                Input CIF file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, Zeo++ default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CIF (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_CIF") < 0)) __PYX_ERR(1, 391, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CIF", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_8read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":409
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":410
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 410, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":409
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "pyzeo/extension.pyx":411
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":412
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_rad_file = rad_file
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 412, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":411
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":414
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 414, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_4;

  /* "pyzeo/extension.pyx":415
 * 
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 415, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":416
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 416, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "pyzeo/extension.pyx":417
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
      initializeRadTable();

      /* "pyzeo/extension.pyx":416
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":419
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 419, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "pyzeo/extension.pyx":420
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":415
 * 
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  }

  /* "pyzeo/extension.pyx":422
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":423
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":424
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 424, __pyx_L1_error)
  __pyx_t_1 = ((!(readCIFFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":425
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 425, __pyx_L1_error)

    /* "pyzeo/extension.pyx":424
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "pyzeo/extension.pyx":426
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":427
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":391
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":430
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_10read_from_ARC[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a ARC file.\n        Arguments:\n            filename: \n                Input ARC file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_ARC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_ARC") < 0)) __PYX_ERR(1, 430, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_ARC", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 430, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_10read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_ARC", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":447
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":448
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 448, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":447
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "pyzeo/extension.pyx":449
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":450
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 450, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":449
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":453
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 453, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_4;

  /* "pyzeo/extension.pyx":454
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 454, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":455
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 455, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "pyzeo/extension.pyx":456
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
      initializeRadTable();

      /* "pyzeo/extension.pyx":455
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":458
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 458, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "pyzeo/extension.pyx":459
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":454
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  }

  /* "pyzeo/extension.pyx":461
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":462
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":463
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 463, __pyx_L1_error)
  __pyx_t_1 = ((!(readARCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":464
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 464, __pyx_L1_error)

    /* "pyzeo/extension.pyx":463
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "pyzeo/extension.pyx":465
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 465, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":466
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":430
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":469
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CSSR file.\n        Arguments:\n            filename: \n                Input CSSR file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CSSR (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_CSSR") < 0)) __PYX_ERR(1, 469, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CSSR", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 469, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":486
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":487
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 487, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":486
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "pyzeo/extension.pyx":488
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":489
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 489, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":488
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":493
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             #if not rad_file:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_rad_flag);
  __Pyx_GIVEREF(__pyx_v_rad_flag);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_rad_flag);
  __Pyx_INCREF(__pyx_v_rad_file);
  __Pyx_GIVEREF(__pyx_v_rad_file);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_rad_file);
  if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":494
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 494, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":496
 *         if rad_flag:
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
    initializeRadTable();

    /* "pyzeo/extension.pyx":497
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 497, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "pyzeo/extension.pyx":498
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 498, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "pyzeo/extension.pyx":499
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
      readRadTable(__pyx_v_c_rad_file);

      /* "pyzeo/extension.pyx":497
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 */
    }

    /* "pyzeo/extension.pyx":494
 *         cdef char* c_rad_file
 *         print(rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             pyzeo.extension.zeo_initializeRadTable()
 */
  }

  /* "pyzeo/extension.pyx":501
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":502
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 502, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":503
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L1_error)
  __pyx_t_2 = ((!(readCSSRFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_1) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":504
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 504, __pyx_L1_error)

    /* "pyzeo/extension.pyx":503
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "pyzeo/extension.pyx":505
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 505, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_2;

  /* "pyzeo/extension.pyx":506
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":469
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":509
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_14read_from_V1[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a V1 file.\n        Arguments:\n            filename: \n                Input V1 file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_V1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_V1") < 0)) __PYX_ERR(1, 509, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_V1", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 509, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_14read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "pyzeo/extension.pyx":526
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":527
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 527, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":526
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "pyzeo/extension.pyx":528
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":529
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 529, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":528
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":532
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 532, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_4;

  /* "pyzeo/extension.pyx":533
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 533, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":534
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 534, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "pyzeo/extension.pyx":535
 *         if rad_flag:
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 */
      initializeRadTable();

      /* "pyzeo/extension.pyx":534
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
      goto __pyx_L6;
    }

    /* "pyzeo/extension.pyx":537
 *                 pyzeo.extension.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
    /*else*/ {
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "pyzeo/extension.pyx":533
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 pyzeo.extension.zeo_initializeRadTable()
 */
  }

  /* "pyzeo/extension.pyx":539
 *                 pyzeo.extension.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":540
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 540, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":541
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 541, __pyx_L1_error)
  __pyx_t_1 = ((!(readV1File(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":542
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 542, __pyx_L1_error)

    /* "pyzeo/extension.pyx":541
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "pyzeo/extension.pyx":543
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 543, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "pyzeo/extension.pyx":544
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CSSR(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":509
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":546
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR[] = "\n        Writes the atom data in AtomNetwork to a CSSR file.\n        Arguments:\n            filename: \n                Output CSSR file name.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CSSR (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":553
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":554
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 554, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":553
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":557
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 557, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":558
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCSSR(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":559
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CIF(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 559, __pyx_L1_error)

    /* "pyzeo/extension.pyx":558
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":546
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":561
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_18write_to_CIF[] = "\n        Writes the atom data in AtomNetwork to a CIF file.\n        Arguments:\n            filename: \n                Output CIF file name.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CIF (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_18write_to_CIF(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":568
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":569
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 569, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":568
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":572
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 572, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":573
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCIF(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":574
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_V1(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 574, __pyx_L1_error)

    /* "pyzeo/extension.pyx":573
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":561
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":576
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_20write_to_V1[] = "\n        Writes the atom data in AtomNetwork to a V1 file.\n        Arguments:\n            filename: \n                Output V1 file name.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_V1 (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_20write_to_V1(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":583
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":584
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 584, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":583
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":587
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 587, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":588
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToV1(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":589
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 589, __pyx_L1_error)

    /* "pyzeo/extension.pyx":588
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":576
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":591
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ[] = "\n        Writes the atom data in AtomNetwork to an XYZ file.\n        Arguments:\n            filename: \n                Output XYZ file name.\n            supercell_flag:\n                Flag denoting whether to write 2x2x2 supercell.\n            is_duplicate_perimeter_atoms:\n                Flag denoting whether perimeter atoms need to be replicated.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_v_is_duplicate_perimeter_atoms = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_supercell_flag,&__pyx_n_s_is_duplicate_perimeter_atoms,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, 1); __PYX_ERR(1, 591, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_duplicate_perimeter_atoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, 2); __PYX_ERR(1, 591, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_XYZ") < 0)) __PYX_ERR(1, 591, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
    __pyx_v_is_duplicate_perimeter_atoms = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 591, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag, __pyx_v_is_duplicate_perimeter_atoms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":603
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":604
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 604, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":603
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":607
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 607, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":608
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 608, __pyx_L1_error)

  /* "pyzeo/extension.pyx":609
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_duplicate_perimeter_atoms); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L1_error)

  /* "pyzeo/extension.pyx":608
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  __pyx_t_5 = ((!(writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_2, __pyx_t_1) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "pyzeo/extension.pyx":610
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_VTK(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 610, __pyx_L1_error)

    /* "pyzeo/extension.pyx":608
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  }

  /* "pyzeo/extension.pyx":591
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":612
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_24write_to_VTK[] = "\n        Writes the boundary of unit cell within the AtomNetwork to a VTK file.\n        Arguments:\n            filename: \n                Output VTK file name.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_VTK (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_24write_to_VTK(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_VTK", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":619
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":620
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 620, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":619
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":623
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 623, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":624
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToVTK(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":625
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 625, __pyx_L1_error)

    /* "pyzeo/extension.pyx":624
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":612
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_VTK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":627
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC[] = "\n        Writes the atom data in AtomNetwork to a .mop file.\n        Arguments:\n            filename: \n                Output MOPAC file name.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_MOPAC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_supercell_flag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, 1); __PYX_ERR(1, 627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_MOPAC") < 0)) __PYX_ERR(1, 627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_MOPAC", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":634
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":635
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 635, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":634
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":637
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":638
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 638, __pyx_L1_error)
  __pyx_t_1 = ((!(writeToMOPAC(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyzeo/extension.pyx":639
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def calculate_free_sphere_parameters(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 639, __pyx_L1_error)

    /* "pyzeo/extension.pyx":638
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
 */
  }

  /* "pyzeo/extension.pyx":627
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":641
 *              raise IOError
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_29calculate_free_sphere_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_28calculate_free_sphere_parameters[] = "\n        Computes the diameters of the largest included sphere, free sphere \n        and included sphere along free sphere path. \n        Arguments:\n            filename:\n                Name of file where the diameters are stored.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_29calculate_free_sphere_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_28calculate_free_sphere_parameters(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_28calculate_free_sphere_parameters(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_edge_centers = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_face_centers = NULL;
  char *__pyx_v_c_fname;
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  char *__pyx_t_9;
  VORONOI_NETWORK *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":649
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":650
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 650, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":649
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":652
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 652, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(1, 652, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 652, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_edge_centers = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_face_centers = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pyzeo/extension.pyx":653
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
 *         cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 */
  __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 653, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_9;

  /* "pyzeo/extension.pyx":654
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition()
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 654, __pyx_L1_error)
  __pyx_t_10 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_10;

  /* "pyzeo/extension.pyx":655
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)             # <<<<<<<<<<<<<<
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):
 */
  calculateFreeSphereParameters(__pyx_v_vornet_ptr, __pyx_v_c_fname, 0);

  /* "pyzeo/extension.pyx":641
 *              raise IOError
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.calculate_free_sphere_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":657
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_31perform_voronoi_decomposition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_11AtomNetwork_30perform_voronoi_decomposition[] = "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n        Returns:\n            Instance of VoronoiNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_31perform_voronoi_decomposition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_saveVorCells = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saveVorCells,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_saveVorCells);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perform_voronoi_decomposition") < 0)) __PYX_ERR(1, 657, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_saveVorCells = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_30perform_voronoi_decomposition(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), __pyx_v_saveVorCells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyzeo/extension.pyx":690
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct_1_genexpr(__pyx_ptype_5pyzeo_9extension___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 690, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_perform_voronoi_decomposition_lo, __pyx_n_s_pyzeo_extension); if (unlikely(!gen)) __PYX_ERR(1, 690, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 690, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) { __Pyx_RaiseClosureNameError("edge_center"); __PYX_ERR(1, 690, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 690, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 690, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 690, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 690, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 690, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 690, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_x, __pyx_int_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 690, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":657
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_30perform_voronoi_decomposition(struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *__pyx_cur_scope;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet = NULL;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_v_edge_centers = NULL;
  std::vector<VOR_EDGE>  __pyx_v_vedges;
  std::vector<VOR_NODE>  __pyx_v_vnodes;
  std::vector<VOR_EDGE> ::size_type __pyx_v_i;
  int __pyx_v_edge_orig;
  int __pyx_v_edge_end;
  VOR_NODE __pyx_v_o_vnode;
  VOR_NODE __pyx_v_e_vnode;
  PyObject *__pyx_v_face_centers = NULL;
  std::vector<VOR_FACE>  __pyx_v_vfaces;
  std::vector<Point>  __pyx_v_vertices;
  CYTHON_UNUSED Point *__pyx_v_cpoint_ptr;
  std::vector<int>  __pyx_v_node_ids;
  PyObject *__pyx_v_face_node_ids = NULL;
  std::vector<VOR_FACE> ::size_type __pyx_v_j;
  PyObject *__pyx_v_node_id_list = NULL;
  std::vector<Point> ::size_type __pyx_v_k;
  PyObject *__pyx_v_node_id_set = NULL;
  struct __pyx_obj_5pyzeo_9extension_Point *__pyx_v_centroid = NULL;
  PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_center = NULL;
  PyObject *__pyx_v_cntr = NULL;
  PyObject *__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<VOR_EDGE>  __pyx_t_4;
  std::vector<VOR_NODE>  __pyx_t_5;
  std::vector<VOR_EDGE> ::size_type __pyx_t_6;
  std::vector<VOR_EDGE> ::size_type __pyx_t_7;
  std::vector<VOR_EDGE> ::size_type __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  std::vector<VOR_CELL> ::size_type __pyx_t_14;
  std::vector<VOR_CELL> ::size_type __pyx_t_15;
  std::vector<VOR_FACE>  __pyx_t_16;
  std::vector<VOR_FACE> ::size_type __pyx_t_17;
  std::vector<VOR_FACE> ::size_type __pyx_t_18;
  std::vector<VOR_FACE> ::size_type __pyx_t_19;
  std::vector<int>  __pyx_t_20;
  std::vector<int> ::size_type __pyx_t_21;
  std::vector<int> ::size_type __pyx_t_22;
  std::vector<Point> ::size_type __pyx_t_23;
  Point *__pyx_t_24;
  std::vector<Point>  __pyx_t_25;
  std::vector<Point> ::size_type __pyx_t_26;
  std::vector<Point> ::size_type __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  PyObject *__pyx_t_29 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);
  __pyx_cur_scope = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(__pyx_ptype_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 657, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "pyzeo/extension.pyx":669
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":674
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             raise ValueError # Change it to appropriate error
 *         cdef int N
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L1_error)

  /* "pyzeo/extension.pyx":673
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
 */
  __pyx_t_3 = ((!(performVoronoiDecomp(__pyx_v_self->rad_flag, __pyx_v_self->thisptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_2, (&__pyx_v_bvcells)) != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pyzeo/extension.pyx":675
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error             # <<<<<<<<<<<<<<
 *         cdef int N
 * 
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 675, __pyx_L1_error)

    /* "pyzeo/extension.pyx":673
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
 */
  }

  /* "pyzeo/extension.pyx":679
 * 
 *         # Get the edge centers
 *         edge_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edge_centers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":680
 *         # Get the edge centers
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
 */
  __pyx_t_4 = __pyx_v_vornet->thisptr->edges;
  __pyx_v_vedges = __pyx_t_4;

  /* "pyzeo/extension.pyx":681
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes             # <<<<<<<<<<<<<<
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
 */
  __pyx_t_5 = __pyx_v_vornet->thisptr->nodes;
  __pyx_v_vnodes = __pyx_t_5;

  /* "pyzeo/extension.pyx":682
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):             # <<<<<<<<<<<<<<
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
 */
  __pyx_t_6 = __pyx_v_vedges.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "pyzeo/extension.pyx":683
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin             # <<<<<<<<<<<<<<
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
 */
    __pyx_t_9 = (__pyx_v_vedges[__pyx_v_i]).from;
    __pyx_v_edge_orig = __pyx_t_9;

    /* "pyzeo/extension.pyx":684
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending             # <<<<<<<<<<<<<<
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 */
    __pyx_t_9 = (__pyx_v_vedges[__pyx_v_i]).to;
    __pyx_v_edge_end = __pyx_t_9;

    /* "pyzeo/extension.pyx":685
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]             # <<<<<<<<<<<<<<
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
 */
    __pyx_v_o_vnode = (__pyx_v_vnodes[__pyx_v_edge_orig]);

    /* "pyzeo/extension.pyx":686
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]             # <<<<<<<<<<<<<<
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
 */
    __pyx_v_e_vnode = (__pyx_v_vnodes[__pyx_v_edge_end]);

    /* "pyzeo/extension.pyx":687
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_o_vnode.x + __pyx_v_e_vnode.x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "pyzeo/extension.pyx":688
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \             # <<<<<<<<<<<<<<
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 */
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_o_vnode.y + __pyx_v_e_vnode.y)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "pyzeo/extension.pyx":689
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)             # <<<<<<<<<<<<<<
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
 */
    __pyx_t_11 = PyFloat_FromDouble((__pyx_v_o_vnode.z + __pyx_v_e_vnode.z)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "pyzeo/extension.pyx":687
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 */
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
    __pyx_t_1 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_edge_center);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_edge_center, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_12 = 0;

    /* "pyzeo/extension.pyx":690
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */
    __pyx_t_12 = __pyx_pf_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_edge_center);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_edge_center, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "pyzeo/extension.pyx":691
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_edge_center, __pyx_v_edge_centers, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 691, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "pyzeo/extension.pyx":692
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_11 = __pyx_cur_scope->__pyx_v_edge_center;
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_edge_centers, __pyx_t_11); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "pyzeo/extension.pyx":691
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
 */
    }
  }

  /* "pyzeo/extension.pyx":697
 * 
 *         # Get the vorcells and obtain the face centers
 *         face_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_FACE] vfaces
 *         cdef vector[CPoint] vertices
 */
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_face_centers = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pyzeo/extension.pyx":703
 *         #cdef map[int, int] id_maps
 *         cdef vector[int] node_ids
 *         face_node_ids = set()             # <<<<<<<<<<<<<<
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
 */
  __pyx_t_11 = PySet_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_face_node_ids = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pyzeo/extension.pyx":704
 *         cdef vector[int] node_ids
 *         face_node_ids = set()
 *         for i in range(vcells.size()):             # <<<<<<<<<<<<<<
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
 */
  __pyx_t_14 = __pyx_v_vcells.size();
  __pyx_t_15 = __pyx_t_14;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_15; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "pyzeo/extension.pyx":705
 *         face_node_ids = set()
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces             # <<<<<<<<<<<<<<
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
 */
    __pyx_t_16 = (__pyx_v_vcells[__pyx_v_i]).faces;
    __pyx_v_vfaces = __pyx_t_16;

    /* "pyzeo/extension.pyx":706
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):             # <<<<<<<<<<<<<<
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
 */
    __pyx_t_17 = __pyx_v_vfaces.size();
    __pyx_t_18 = __pyx_t_17;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
      __pyx_v_j = __pyx_t_19;

      /* "pyzeo/extension.pyx":707
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids             # <<<<<<<<<<<<<<
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
 */
      __pyx_t_20 = (__pyx_v_vfaces[__pyx_v_j]).nodeIDs;
      __pyx_v_node_ids = __pyx_t_20;

      /* "pyzeo/extension.pyx":708
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []             # <<<<<<<<<<<<<<
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
 */
      __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_node_id_list, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "pyzeo/extension.pyx":709
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):             # <<<<<<<<<<<<<<
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 */
      __pyx_t_21 = __pyx_v_node_ids.size();
      __pyx_t_22 = __pyx_t_21;
      for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
        __pyx_v_k = __pyx_t_23;

        /* "pyzeo/extension.pyx":710
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])             # <<<<<<<<<<<<<<
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
 */
        __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_node_ids[__pyx_v_k])); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 710, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_node_id_list, __pyx_t_11); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 710, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }

      /* "pyzeo/extension.pyx":711
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)             # <<<<<<<<<<<<<<
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
 */
      __pyx_t_11 = __Pyx_PyFrozenSet_New(__pyx_v_node_id_list); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_node_id_set, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "pyzeo/extension.pyx":712
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 */
      __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_v_node_id_set, __pyx_v_face_node_ids, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 712, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "pyzeo/extension.pyx":713
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)             # <<<<<<<<<<<<<<
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 */
        __pyx_t_13 = PySet_Add(__pyx_v_face_node_ids, __pyx_v_node_id_set); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 713, __pyx_L1_error)

        /* "pyzeo/extension.pyx":714
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()             # <<<<<<<<<<<<<<
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
 */
        __pyx_t_11 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_Point)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_centroid, ((struct __pyx_obj_5pyzeo_9extension_Point *)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "pyzeo/extension.pyx":715
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr             # <<<<<<<<<<<<<<
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
 */
        if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_centroid), __pyx_ptype_5pyzeo_9extension_Point)))) __PYX_ERR(1, 715, __pyx_L1_error)
        __pyx_t_24 = __pyx_v_centroid->thisptr;
        __pyx_v_cpoint_ptr = __pyx_t_24;

        /* "pyzeo/extension.pyx":716
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices             # <<<<<<<<<<<<<<
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 */
        __pyx_t_25 = (__pyx_v_vfaces[__pyx_v_j]).orderedVertices;
        __pyx_v_vertices = __pyx_t_25;

        /* "pyzeo/extension.pyx":717
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):             # <<<<<<<<<<<<<<
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 */
        __pyx_t_23 = __pyx_v_vertices.size();
        __pyx_t_26 = __pyx_t_23;
        for (__pyx_t_27 = 0; __pyx_t_27 < __pyx_t_26; __pyx_t_27+=1) {
          __pyx_v_k = __pyx_t_27;

          /* "pyzeo/extension.pyx":718
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]             # <<<<<<<<<<<<<<
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 718, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[0])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 718, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 718, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x, __pyx_t_10) < 0) __PYX_ERR(1, 718, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "pyzeo/extension.pyx":719
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]             # <<<<<<<<<<<<<<
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 719, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[1])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 719, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 719, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y, __pyx_t_11) < 0) __PYX_ERR(1, 719, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "pyzeo/extension.pyx":720
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]             # <<<<<<<<<<<<<<
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[2])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z, __pyx_t_10) < 0) __PYX_ERR(1, 720, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "pyzeo/extension.pyx":721
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x, __pyx_t_11) < 0) __PYX_ERR(1, 721, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "pyzeo/extension.pyx":722
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y, __pyx_t_10) < 0) __PYX_ERR(1, 722, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "pyzeo/extension.pyx":723
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()             # <<<<<<<<<<<<<<
 *                     face_centers.append(centroid)
 * 
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z, __pyx_t_11) < 0) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "pyzeo/extension.pyx":724
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)             # <<<<<<<<<<<<<<
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_face_centers, ((PyObject *)__pyx_v_centroid)); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 724, __pyx_L1_error)

        /* "pyzeo/extension.pyx":712
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 */
      }
    }
  }

  /* "pyzeo/extension.pyx":727
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []             # <<<<<<<<<<<<<<
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
 */
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_fcs = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pyzeo/extension.pyx":728
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
 */
  __pyx_t_11 = __pyx_v_face_centers; __Pyx_INCREF(__pyx_t_11); __pyx_t_28 = 0;
  for (;;) {
    if (__pyx_t_28 >= PyList_GET_SIZE(__pyx_t_11)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_12 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_28); __Pyx_INCREF(__pyx_t_12); __pyx_t_28++; if (unlikely(0 < 0)) __PYX_ERR(1, 728, __pyx_L1_error)
    #else
    __pyx_t_12 = PySequence_ITEM(__pyx_t_11, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_center, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "pyzeo/extension.pyx":729
 *         fcs = []
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)             # <<<<<<<<<<<<<<
 *             fcs.append(cntr)
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_x); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_29 = PyTuple_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_1);
    __pyx_t_12 = 0;
    __pyx_t_10 = 0;
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cntr, ((PyObject*)__pyx_t_29));
    __pyx_t_29 = 0;

    /* "pyzeo/extension.pyx":730
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)             # <<<<<<<<<<<<<<
 * 
 *         #bvcelllist = []
 */
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_fcs, __pyx_v_cntr); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 730, __pyx_L1_error)

    /* "pyzeo/extension.pyx":728
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
 */
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "pyzeo/extension.pyx":744
 *             #basicvcell.thisptr = &(bvcells[i])
 *             #bvcelllist.append(bvcells[i])
 *         return vornet, edge_centers, fcs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(((PyObject *)__pyx_v_vornet));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vornet));
  PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_vornet));
  __Pyx_INCREF(__pyx_v_edge_centers);
  __Pyx_GIVEREF(__pyx_v_edge_centers);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_edge_centers);
  __Pyx_INCREF(__pyx_v_fcs);
  __Pyx_GIVEREF(__pyx_v_fcs);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_fcs);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":657
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, False)
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_face_node_ids);
  __Pyx_XDECREF(__pyx_v_node_id_list);
  __Pyx_XDECREF(__pyx_v_node_id_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_centroid);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_center);
  __Pyx_XDECREF(__pyx_v_cntr);
  __Pyx_XDECREF(__pyx_gb_5pyzeo_9extension_11AtomNetwork_29perform_voronoi_decomposition_2generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_32__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11AtomNetwork_34__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11AtomNetwork_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.AtomNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":751
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VOR_NODE *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":752
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new VOR_NODE()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VOR_NODE();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 752, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":751
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":754
 *         self.thisptr = new VOR_NODE()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":757
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_11VoronoiNode_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":758
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property coords:
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":757
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":761
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyzeo/extension.pyx":762
 *     property coords:
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyList_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_coords = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":763
 *         def __get__(self):
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":761
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":764
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6coords_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":768
 *             This variable is not supposed to be modified manually
 *             """
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 768, __pyx_L1_error)

  /* "pyzeo/extension.pyx":769
 *             """
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_2;

  /* "pyzeo/extension.pyx":770
 *             print("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_2;

  /* "pyzeo/extension.pyx":771
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property radius:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_2;

  /* "pyzeo/extension.pyx":764
 *             coords = list(self.thisptr.x, self.thisptr.y, self.thisptr.z)
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":774
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere             # <<<<<<<<<<<<<<
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius___get__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->rad_stat_sphere); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":775
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad); /*proto*/
static int __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_rad));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_11VoronoiNode_6radius_2__set__(struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyzeo/extension.pyx":776
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.rad_stat_sphere = rad
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 776, __pyx_L1_error)

  /* "pyzeo/extension.pyx":777
 *         def __set__(self, rad):
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad             # <<<<<<<<<<<<<<
 * 
 * cdef class VoronoiNetwork:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_rad); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 777, __pyx_L1_error)
  __pyx_v_self->thisptr->rad_stat_sphere = __pyx_t_1;

  /* "pyzeo/extension.pyx":775
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":787
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VORONOI_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":788
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new VORONOI_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VORONOI_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 788, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":787
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":790
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":793
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":794
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":793
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyzeo/extension.pyx":796
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_6size(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pyzeo/extension.pyx":797
 * 
 *     def size(self):
 *         return self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 * 
 *     def prune(self, radius):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":796
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":799
 *         return self.thisptr.nodes.size()
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, PyObject *__pyx_v_radius); /*proto*/
static char __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_8prune[] = "\n        Removes the edges that do not allow a sphere to pass.\n        Arguments:\n            radius:\n                Radius of the sphere\n        Returns:\n            Instance of VoronoiNetwork with edges pruned.\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, PyObject *__pyx_v_radius) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_8prune(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius) {
  VORONOI_NETWORK __pyx_v_newcvornet;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_newvornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune", 0);

  /* "pyzeo/extension.pyx":808
 *             Instance of VoronoiNetwork with edges pruned.
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)             # <<<<<<<<<<<<<<
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 808, __pyx_L1_error)
  __pyx_v_newcvornet = __pyx_v_self->thisptr->prune(__pyx_t_1);

  /* "pyzeo/extension.pyx":809
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         newvornet.thisptr = &newcvornet
 *         return newvornet
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_newvornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":810
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet             # <<<<<<<<<<<<<<
 *         return newvornet
 * 
 */
  __pyx_v_newvornet->thisptr = (&__pyx_v_newcvornet);

  /* "pyzeo/extension.pyx":811
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
 *         return newvornet             # <<<<<<<<<<<<<<
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newvornet));
  __pyx_r = ((PyObject *)__pyx_v_newvornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":799
 *         return self.thisptr.nodes.size()
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newvornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":813
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ[] = "\n        Create diagrams of 1) Voronoi network and 2) accessible Voronoi \n        network, and write the diagrams in VTK files and the Voronoi \n        networks in XYZ files. Useful for visualizing the Voronoi network.\n        Args:\n            name:\n                Name to be used for output files.\n            probeRad:\n                Radius of the probe.\n            atmnet:\n                pyzeo.extension.AtomNetwork\n            shift_x (default=0):\n                Shift the accessible Voronoi network along x-axis\n            shift_y (default=0):\n                Shift the accessible Voronoi network along y-axis\n            shift_z (default=0):\n                Shift the accessible Voronoi network along z-axis\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  double __pyx_v_probeRad;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_v_shift_x;
  int __pyx_v_shift_y;
  int __pyx_v_shift_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_probeRad,&__pyx_n_s_atmnet,&__pyx_n_s_shift_x,&__pyx_n_s_shift_y,&__pyx_n_s_shift_z,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probeRad)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, 1); __PYX_ERR(1, 813, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, 2); __PYX_ERR(1, 813, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_x);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_y);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_z);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "analyze_writeto_XYZ") < 0)) __PYX_ERR(1, 813, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_probeRad = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_probeRad == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 813, __pyx_L3_error)
    __pyx_v_atmnet = values[2];
    if (values[3]) {
      __pyx_v_shift_x = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_shift_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 814, __pyx_L3_error)
    } else {
      __pyx_v_shift_x = ((int)0);
    }
    if (values[4]) {
      __pyx_v_shift_y = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_shift_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 814, __pyx_L3_error)
    } else {
      __pyx_v_shift_y = ((int)0);
    }
    if (values[5]) {
      __pyx_v_shift_z = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_shift_z == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 814, __pyx_L3_error)
    } else {
      __pyx_v_shift_z = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 813, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v_name, __pyx_v_probeRad, __pyx_v_atmnet, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  CYTHON_UNUSED char *__pyx_v_cname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ATOM_NETWORK *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ", 0);
  __Pyx_INCREF(__pyx_v_name);

  /* "pyzeo/extension.pyx":833
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_name); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":834
 *         """
 *         if isinstance(name, unicode):
 *             name = (<unicode>name).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 834, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_name)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":833
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":836
 *             name = (<unicode>name).encode('utf8')
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 836, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":837
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name             # <<<<<<<<<<<<<<
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 837, __pyx_L1_error)
  __pyx_v_cname = __pyx_t_5;

  /* "pyzeo/extension.pyx":838
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,             # <<<<<<<<<<<<<<
 *                 c_atmnetptr)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L1_error)

  /* "pyzeo/extension.pyx":839
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):
 */
  visVoro(__pyx_t_5, __pyx_v_probeRad, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z, __pyx_v_self->thisptr, __pyx_v_c_atmnetptr);

  /* "pyzeo/extension.pyx":813
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":841
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ[] = "\n        Write only voronoi node information to XYZ file.\n        Args:\n            filename:\n                string\n                Name of file to which voronoi node info is written.\n            cutoff_radius:\n                float\n                Threshold radius (default=0)\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  double __pyx_v_cutoff_radius;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_cutoff_radius,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cutoff_radius);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_XYZ") < 0)) __PYX_ERR(1, 841, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    if (values[1]) {
      __pyx_v_cutoff_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_cutoff_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 841, __pyx_L3_error)
    } else {
      __pyx_v_cutoff_radius = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 841, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_cutoff_radius);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "pyzeo/extension.pyx":852
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":853
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 853, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":852
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "pyzeo/extension.pyx":855
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 855, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "pyzeo/extension.pyx":856
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
 */
  __pyx_t_2 = ((!(writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_v_cutoff_radius) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":858
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
 *             raise ValueError             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 858, __pyx_L1_error)

    /* "pyzeo/extension.pyx":856
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
 */
  }

  /* "pyzeo/extension.pyx":841
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":861
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition[] = "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n        Returns:\n            Instance of VoronoiNetwork\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_saveVorCells = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_saveVorCells,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_saveVorCells);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perform_voronoi_decomposition") < 0)) __PYX_ERR(1, 861, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_saveVorCells = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 861, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(((PyTypeObject*)__pyx_v_cls), __pyx_v_atmnet, __pyx_v_saveVorCells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells) {
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_vornet = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ATOM_NETWORK *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);

  /* "pyzeo/extension.pyx":873
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef vector[VOR_CELL] vcells
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":874
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 874, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_2;

  /* "pyzeo/extension.pyx":878
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_rad_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":879
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             raise ValueError # Change it to appropriate error
 *         #cdef int N
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 879, __pyx_L1_error)

  /* "pyzeo/extension.pyx":878
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
 */
  __pyx_t_5 = ((!(performVoronoiDecomp(__pyx_t_3, __pyx_v_c_atmnetptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_4, (&__pyx_v_bvcells)) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "pyzeo/extension.pyx":880
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error             # <<<<<<<<<<<<<<
 *         #cdef int N
 *         #vorcelllist = []
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 880, __pyx_L1_error)

    /* "pyzeo/extension.pyx":878
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print(self.rad_flag)
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             raise ValueError # Change it to appropriate error
 */
  }

  /* "pyzeo/extension.pyx":895
 *             #basicvcell.thisptr = &(bvcells[i])
 *             #bvcelllist.append(bvcells[i])
 *         return vornet             # <<<<<<<<<<<<<<
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vornet));
  __pyx_r = ((PyObject *)__pyx_v_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":861
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_14VoronoiNetwork_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VoronoiNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":897
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_51substitute_atoms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_50substitute_atoms[] = "\n    Attempt to substitute every other Si atom with Al atom.\n    AtomNetwork may only consist of Si and O atoms, where each Si atom \n    must be bonded to exactly 4 oxygen atoms and each oxygen atom must \n    be bonded to exactly 2 Si atoms. Raises exception if the substitution\n    is not successful. \n    Args:\n        atmnet:\n            pyzeo.netstorage.AtomNetwork\n        substiuteSeed:\n            Boolean flag to specify whether the seeded Si atom is \n            substituted or not. Since only 2 configurations are possible \n            if the structure is consistent, changing this parameter enables \n            generation of all configurations. \n        radialFlag:\n            Boolean flag to specify whether atomic sizes are to be used.\n    Returns:\n        If successful, returns AtomNetwork instance with Si replaced with Al\n        and the number of substitutions. \n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_51substitute_atoms = {"substitute_atoms", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_51substitute_atoms, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_50substitute_atoms};
static PyObject *__pyx_pw_5pyzeo_9extension_51substitute_atoms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_substituteSeed = 0;
  PyObject *__pyx_v_radialFlag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("substitute_atoms (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_substituteSeed,&__pyx_n_s_radialFlag,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substituteSeed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, 1); __PYX_ERR(1, 897, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, 2); __PYX_ERR(1, 897, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "substitute_atoms") < 0)) __PYX_ERR(1, 897, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_substituteSeed = values[1];
    __pyx_v_radialFlag = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 897, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_50substitute_atoms(__pyx_self, __pyx_v_atmnet, __pyx_v_substituteSeed, __pyx_v_radialFlag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_50substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag) {
  int __pyx_v_substitutionNo[1];
  struct __pyx_obj_5pyzeo_9extension_AtomNetwork *__pyx_v_atmnet_copy = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  int __pyx_v_subNo;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ATOM_NETWORK *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("substitute_atoms", 0);

  /* "pyzeo/extension.pyx":919
 *     """
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()             # <<<<<<<<<<<<<<
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet_copy = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":920
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 920, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_2;

  /* "pyzeo/extension.pyx":921
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_substituteSeed); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 921, __pyx_L1_error)

  /* "pyzeo/extension.pyx":922
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):             # <<<<<<<<<<<<<<
 *         raise ValueError
 *     subNo = substitutionNo[0]
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_radialFlag); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 922, __pyx_L1_error)

  /* "pyzeo/extension.pyx":921
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  __pyx_t_5 = ((!(substituteAtoms(__pyx_v_c_atmnet_ptr, __pyx_v_atmnet_copy->thisptr, __pyx_t_3, __pyx_v_substitutionNo, __pyx_t_4) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "pyzeo/extension.pyx":923
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
 *         raise ValueError             # <<<<<<<<<<<<<<
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 923, __pyx_L1_error)

    /* "pyzeo/extension.pyx":921
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  }

  /* "pyzeo/extension.pyx":924
 *             substitutionNo, radialFlag):
 *         raise ValueError
 *     subNo = substitutionNo[0]             # <<<<<<<<<<<<<<
 *     return atmnet_copy, subNo
 * 
 */
  __pyx_v_subNo = (__pyx_v_substitutionNo[0]);

  /* "pyzeo/extension.pyx":925
 *         raise ValueError
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_subNo); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet_copy));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_atmnet_copy));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_atmnet_copy));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":897
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":934
 *     """
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_15DijkstraNetwork___cinit__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  DIJKSTRA_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":935
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def from_VoronoiNetwork(vornet):
 */
  try {
    __pyx_t_1 = new DIJKSTRA_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 935, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":934
 *     """
 *     #cdef DIJKSTRA_NETWORK* thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":937
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
 *     def from_VoronoiNetwork(vornet):             # <<<<<<<<<<<<<<
 *         """
 *         Build Dijkstra Net from input Voronoi Net
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork(PyObject *__pyx_v_vornet, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork[] = "\n        Build Dijkstra Net from input Voronoi Net\n        ";
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork(PyObject *__pyx_v_vornet, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_VoronoiNetwork (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(((PyTypeObject*)__pyx_v_vornet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork(PyTypeObject *__pyx_v_vornet) {
  struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_dijkstranet = NULL;
  VORONOI_NETWORK *__pyx_v_c_vornet;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  VORONOI_NETWORK *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_VoronoiNetwork", 0);

  /* "pyzeo/extension.pyx":941
 *         Build Dijkstra Net from input Voronoi Net
 *         """
 *         dijkstranet = DijkstraNetwork()             # <<<<<<<<<<<<<<
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_DijkstraNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dijkstranet = ((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":942
 *         """
 *         dijkstranet = DijkstraNetwork()
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
 */
  if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_vornet), __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 942, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet = __pyx_t_2;

  /* "pyzeo/extension.pyx":943
 *         dijkstranet = DijkstraNetwork()
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)             # <<<<<<<<<<<<<<
 *         return dijkstranet
 *     def __dealloc__(self):
 */
  DIJKSTRA_NETWORK::buildDijkstraNetwork(__pyx_v_c_vornet, __pyx_v_dijkstranet->thisptr);

  /* "pyzeo/extension.pyx":944
 *         c_vornet = (<VoronoiNetwork?>vornet).thisptr
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dijkstranet));
  __pyx_r = ((PyObject *)__pyx_v_dijkstranet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":937
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
 *     def from_VoronoiNetwork(vornet):             # <<<<<<<<<<<<<<
 *         """
 *         Build Dijkstra Net from input Voronoi Net
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.from_VoronoiNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dijkstranet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":945
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":946
 *         return dijkstranet
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":945
 *         buildDijkstraNetwork(c_vornet, dijkstranet.thisptr)
 *         return dijkstranet
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_15DijkstraNetwork_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.DijkstraNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":963
 * cdef class VorCell:
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_CELL()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7VorCell___cinit__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VOR_CELL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":964
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):
 *         self.thisptr = new VOR_CELL()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VOR_CELL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 964, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":963
 * cdef class VorCell:
 *     #cdef VOR_CELL *thiptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_CELL()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":966
 *         self.thisptr = new VOR_CELL()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_7VorCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_7VorCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_7VorCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":969
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_7VorCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":970
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class BasicVCell:
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":969
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_VorCell *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_7VorCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_VorCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.VorCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":974
 * cdef class BasicVCell:
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new BASIC_VCELL()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_10BasicVCell___cinit__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  BASIC_VCELL *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyzeo/extension.pyx":975
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):
 *         self.thisptr = new BASIC_VCELL()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new BASIC_VCELL();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 975, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":974
 * cdef class BasicVCell:
 *     #cdef BASIC_VCELL *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new BASIC_VCELL()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":977
 *         self.thisptr = new BASIC_VCELL()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pyzeo_9extension_10BasicVCell_2__init__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":980
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pyzeo_9extension_10BasicVCell_4__dealloc__(struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyzeo/extension.pyx":981
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  delete __pyx_v_self->thisptr;

  /* "pyzeo/extension.pyx":980
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_6__reduce_cython__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5pyzeo_9extension_10BasicVCell_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_10BasicVCell_8__setstate_cython__(((struct __pyx_obj_5pyzeo_9extension_BasicVCell *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_10BasicVCell_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5pyzeo_9extension_BasicVCell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.BasicVCell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":985
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_53compute_centroid_4cycles(PyObject *__pyx_self, PyObject *__pyx_v_vornet); /*proto*/
static char __pyx_doc_5pyzeo_9extension_52compute_centroid_4cycles[] = "\n    Computes the centroid of the 4 corners of quadrilateral voronoi face\n    Args:\n        vornet:\n            pyzeo.storage.VoronoiNetwork\n    Returns:\n        List of centroids in [(x1,y1,z1),(x2,y2,z2),...] format\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_53compute_centroid_4cycles = {"compute_centroid_4cycles", (PyCFunction)__pyx_pw_5pyzeo_9extension_53compute_centroid_4cycles, METH_O, __pyx_doc_5pyzeo_9extension_52compute_centroid_4cycles};
static PyObject *__pyx_pw_5pyzeo_9extension_53compute_centroid_4cycles(PyObject *__pyx_self, PyObject *__pyx_v_vornet) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_centroid_4cycles (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_52compute_centroid_4cycles(__pyx_self, ((PyObject *)__pyx_v_vornet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_52compute_centroid_4cycles(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vornet) {
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  std::vector<CYCLE>  __pyx_v_cycles;
  std::vector<int>  __pyx_v_ids;
  PyObject *__pyx_v_centroid_list = NULL;
  std::vector<CYCLE> ::iterator __pyx_v_it;
  std::vector<int> ::iterator __pyx_v_iit;
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_v_id_set = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  VORONOI_NETWORK *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_centroid_4cycles", 0);

  /* "pyzeo/extension.pyx":995
 *     """
 * 
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[CYCLE] cycles
 *     cdef vector[int] ids
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 995, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":999
 *     cdef vector[int] ids
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):             # <<<<<<<<<<<<<<
 *         raise ValueError
 * 
 */
  __pyx_t_2 = ((!(compute_4cycle(__pyx_v_c_vornet_ptr, (&__pyx_v_cycles), 0, 1) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyzeo/extension.pyx":1000
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):
 *         raise ValueError             # <<<<<<<<<<<<<<
 * 
 *     centroid_list = []
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 1000, __pyx_L1_error)

    /* "pyzeo/extension.pyx":999
 *     cdef vector[int] ids
 * 
 *     if not compute_4cycle(c_vornet_ptr, &cycles, False, 1):             # <<<<<<<<<<<<<<
 *         raise ValueError
 * 
 */
  }

  /* "pyzeo/extension.pyx":1002
 *         raise ValueError
 * 
 *     centroid_list = []             # <<<<<<<<<<<<<<
 *     cdef vector[CYCLE].iterator it = cycles.begin()
 *     cdef vector[int].iterator iit
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_centroid_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1003
 * 
 *     centroid_list = []
 *     cdef vector[CYCLE].iterator it = cycles.begin()             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():
 */
  __pyx_v_it = __pyx_v_cycles.begin();

  /* "pyzeo/extension.pyx":1005
 *     cdef vector[CYCLE].iterator it = cycles.begin()
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_cycles.end()) != 0);
    if (!__pyx_t_2) break;

    /* "pyzeo/extension.pyx":1006
 *     cdef vector[int].iterator iit
 *     while it != cycles.end():
 *         new_xyz = Xyz()             # <<<<<<<<<<<<<<
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
 *         iit = ids.begin()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_Xyz)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_new_xyz, ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1007
 *     while it != cycles.end():
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)             # <<<<<<<<<<<<<<
 *         iit = ids.begin()
 *         #print(ids.size())
 */
    centroid((&(*__pyx_v_it)), __pyx_v_new_xyz->thisptr, (&__pyx_v_ids));

    /* "pyzeo/extension.pyx":1008
 *         new_xyz = Xyz()
 *         centroid(&(deref(it)), new_xyz.thisptr, &ids)
 *         iit = ids.begin()             # <<<<<<<<<<<<<<
 *         #print(ids.size())
 *         id_set = set()
 */
    __pyx_v_iit = __pyx_v_ids.begin();

    /* "pyzeo/extension.pyx":1010
 *         iit = ids.begin()
 *         #print(ids.size())
 *         id_set = set()             # <<<<<<<<<<<<<<
 *         while iit != ids.end():
 *             id_set.add(deref(iit))
 */
    __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_id_set, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1011
 *         #print(ids.size())
 *         id_set = set()
 *         while iit != ids.end():             # <<<<<<<<<<<<<<
 *             id_set.add(deref(iit))
 *             inc(iit)
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_iit != __pyx_v_ids.end()) != 0);
      if (!__pyx_t_2) break;

      /* "pyzeo/extension.pyx":1012
 *         id_set = set()
 *         while iit != ids.end():
 *             id_set.add(deref(iit))             # <<<<<<<<<<<<<<
 *             inc(iit)
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int((*__pyx_v_iit)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySet_Add(__pyx_v_id_set, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1012, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyzeo/extension.pyx":1013
 *         while iit != ids.end():
 *             id_set.add(deref(iit))
 *             inc(iit)             # <<<<<<<<<<<<<<
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})
 */
      (void)((++__pyx_v_iit));
    }

    /* "pyzeo/extension.pyx":1015
 *             inc(iit)
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})             # <<<<<<<<<<<<<<
 *         inc(it)
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ids, __pyx_v_id_set) < 0) __PYX_ERR(1, 1015, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_coords, ((PyObject *)__pyx_v_new_xyz)) < 0) __PYX_ERR(1, 1015, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_centroid_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1015, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyzeo/extension.pyx":1016
 * 
 *         centroid_list.append({'ids':id_set, 'coords':new_xyz})
 *         inc(it)             # <<<<<<<<<<<<<<
 * 
 *     return centroid_list
 */
    (void)((++__pyx_v_it));
  }

  /* "pyzeo/extension.pyx":1018
 *         inc(it)
 * 
 *     return centroid_list             # <<<<<<<<<<<<<<
 * 
 * def compute_face_centers(atmnet):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_centroid_list);
  __pyx_r = __pyx_v_centroid_list;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":985
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyzeo.extension.compute_centroid_4cycles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_centroid_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XDECREF(__pyx_v_id_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1020
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_55compute_face_centers(PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /*proto*/
static char __pyx_doc_5pyzeo_9extension_54compute_face_centers[] = "\n    Compute the face centers of the voronoi network \n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_55compute_face_centers = {"compute_face_centers", (PyCFunction)__pyx_pw_5pyzeo_9extension_55compute_face_centers, METH_O, __pyx_doc_5pyzeo_9extension_54compute_face_centers};
static PyObject *__pyx_pw_5pyzeo_9extension_55compute_face_centers(PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_face_centers (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_54compute_face_centers(__pyx_self, ((PyObject *)__pyx_v_atmnet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_54compute_face_centers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  std::vector<XYZ>  __pyx_v_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_face_centers", 0);

  /* "pyzeo/extension.pyx":1024
 *     Compute the face centers of the voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[XYZ] points
 *     face_center(c_atmnet_ptr, &points)
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1024, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1026
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef vector[XYZ] points
 *     face_center(c_atmnet_ptr, &points)             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  face_center(__pyx_v_c_atmnet_ptr, (&__pyx_v_points));

  /* "pyzeo/extension.pyx":1020
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.compute_face_centers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1030
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_57warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5pyzeo_9extension_57warning = {"warning", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_57warning, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5pyzeo_9extension_57warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "warning", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_objs = __pyx_args;
  __pyx_r = __pyx_pf_5pyzeo_9extension_56warning(__pyx_self, __pyx_v_objs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_objs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_56warning(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_objs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("warning", 0);

  /* "pyzeo/extension.pyx":1031
 * # cluster
 * def warning(*objs):
 *     print("WARNING", *objs)             # <<<<<<<<<<<<<<
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_WARNING);
  __Pyx_GIVEREF(__pyx_n_s_WARNING);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_WARNING);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  if (__Pyx_PyList_Extend(__pyx_t_1, __pyx_v_objs) < 0) __PYX_ERR(1, 1031, __pyx_L1_error)
  {
    PyObject *__pyx_temp = PyList_AsTuple(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_temp; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1030
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyzeo.extension.warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1034
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_59simplify_highaccuracy_vornet(PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /*proto*/
static char __pyx_doc_5pyzeo_9extension_58simplify_highaccuracy_vornet[] = "\n    Generates and simplifies high accuracy voronoi network \n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_59simplify_highaccuracy_vornet = {"simplify_highaccuracy_vornet", (PyCFunction)__pyx_pw_5pyzeo_9extension_59simplify_highaccuracy_vornet, METH_O, __pyx_doc_5pyzeo_9extension_58simplify_highaccuracy_vornet};
static PyObject *__pyx_pw_5pyzeo_9extension_59simplify_highaccuracy_vornet(PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simplify_highaccuracy_vornet (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_58simplify_highaccuracy_vornet(__pyx_self, ((PyObject *)__pyx_v_atmnet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_58simplify_highaccuracy_vornet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("simplify_highaccuracy_vornet", 0);

  /* "pyzeo/extension.pyx":1038
 *     Generates and simplifies high accuracy voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     simplify_ha_vornet(c_atmnetptr)
 * 
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1038, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1039
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     simplify_ha_vornet(c_atmnetptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  simplify_ha_vornet(__pyx_v_c_atmnetptr);

  /* "pyzeo/extension.pyx":1034
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyzeo.extension.simplify_highaccuracy_vornet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1042
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_61reduced_highaccuracy_vornodes(PyObject *__pyx_self, PyObject *__pyx_v_atmnet); /*proto*/
static char __pyx_doc_5pyzeo_9extension_60reduced_highaccuracy_vornodes[] = "\n    Generates simplified hgh accuracy voronoi network\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_61reduced_highaccuracy_vornodes = {"reduced_highaccuracy_vornodes", (PyCFunction)__pyx_pw_5pyzeo_9extension_61reduced_highaccuracy_vornodes, METH_O, __pyx_doc_5pyzeo_9extension_60reduced_highaccuracy_vornodes};
static PyObject *__pyx_pw_5pyzeo_9extension_61reduced_highaccuracy_vornodes(PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduced_highaccuracy_vornodes (wrapper)", 0);
  __pyx_r = __pyx_pf_5pyzeo_9extension_60reduced_highaccuracy_vornodes(__pyx_self, ((PyObject *)__pyx_v_atmnet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_60reduced_highaccuracy_vornodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::vector<XYZ>  __pyx_v_xyz_vect;
  PyObject *__pyx_v_xyz_list = NULL;
  std::vector<XYZ> ::iterator __pyx_v_it;
  struct __pyx_obj_5pyzeo_9extension_Xyz *__pyx_v_new_xyz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduced_highaccuracy_vornodes", 0);

  /* "pyzeo/extension.pyx":1046
 *     Generates simplified hgh accuracy voronoi network
 *     """
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef vector[XYZ] xyz_vect
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1046, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_1;

  /* "pyzeo/extension.pyx":1048
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef vector[XYZ] xyz_vect
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)             # <<<<<<<<<<<<<<
 *     # Conver to list of Xyz
 *     xyz_list = []
 */
  high_accuracy_vornodes_reduction(__pyx_v_c_atmnetptr, (&__pyx_v_xyz_vect));

  /* "pyzeo/extension.pyx":1050
 *     high_accuracy_vornodes_reduction(c_atmnetptr, &xyz_vect)
 *     # Conver to list of Xyz
 *     xyz_list = []             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_xyz_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1052
 *     xyz_list = []
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()             # <<<<<<<<<<<<<<
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 */
  __pyx_v_it = __pyx_v_xyz_vect.begin();

  /* "pyzeo/extension.pyx":1053
 * 
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
 *     while it != xyz_vect.end():             # <<<<<<<<<<<<<<
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_it != __pyx_v_xyz_vect.end()) != 0);
    if (!__pyx_t_3) break;

    /* "pyzeo/extension.pyx":1054
 *     cdef vector[XYZ].iterator it = xyz_vect.begin()
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient             # <<<<<<<<<<<<<<
 *         xyz_list.append(new_xyz)
 *         inc(it)
 */
    __pyx_t_2 = PyFloat_FromDouble((*__pyx_v_it).x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyFloat_FromDouble((*__pyx_v_it).y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble((*__pyx_v_it).z); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5pyzeo_9extension_Xyz), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_xyz, ((struct __pyx_obj_5pyzeo_9extension_Xyz *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "pyzeo/extension.pyx":1055
 *     while it != xyz_vect.end():
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)             # <<<<<<<<<<<<<<
 *         inc(it)
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_xyz_list, ((PyObject *)__pyx_v_new_xyz)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 1055, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1056
 *         new_xyz = Xyz((deref(it)).x, (deref(it)).y, (deref(it)).z) #Infefficient
 *         xyz_list.append(new_xyz)
 *         inc(it)             # <<<<<<<<<<<<<<
 * 
 *     return xyz_list
 */
    (void)((++__pyx_v_it));
  }

  /* "pyzeo/extension.pyx":1058
 *         inc(it)
 * 
 *     return xyz_list             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_xyz_list);
  __pyx_r = __pyx_v_xyz_list;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1042
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.reduced_highaccuracy_vornodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xyz_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_xyz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1061
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_63pruned_highaccuracy_voronoi_network(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_62pruned_highaccuracy_voronoi_network[] = "\n    Prunes hgh accuracy voronoi network by removing voronoi\n    nodes close to the center of the bigger atoms.\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_63pruned_highaccuracy_voronoi_network = {"pruned_highaccuracy_voronoi_network", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_63pruned_highaccuracy_voronoi_network, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_62pruned_highaccuracy_voronoi_network};
static PyObject *__pyx_pw_5pyzeo_9extension_63pruned_highaccuracy_voronoi_network(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pruned_highaccuracy_voronoi_network (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_delta,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pruned_highaccuracy_voronoi_network") < 0)) __PYX_ERR(1, 1061, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pruned_highaccuracy_voronoi_network", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1061, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.pruned_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_62pruned_highaccuracy_voronoi_network(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_62pruned_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  ATOM_NETWORK *__pyx_v_c_ha_atmnetptr;
  VORONOI_NETWORK *__pyx_v_c_vornetptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  ATOM_NETWORK *__pyx_t_8;
  VORONOI_NETWORK *__pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pruned_highaccuracy_voronoi_network", 0);

  /* "pyzeo/extension.pyx":1066
 *     nodes close to the center of the bigger atoms.
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1067
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_high_accuracy_atomnet); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_MED};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1067, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_MED};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1067, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ha_atmnet);
    __Pyx_GIVEREF(__pyx_v_ha_atmnet);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ha_atmnet);
    __Pyx_INCREF(__pyx_n_s_MED);
    __Pyx_GIVEREF(__pyx_n_s_MED);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_MED);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1068
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ha_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1068, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(1, 1068, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1068, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_ecs = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_fcs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1069
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1069, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1070
 *     vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1070, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_ha_atmnet)->thisptr;
  __pyx_v_c_ha_atmnetptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1071
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 1071, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornetptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1073
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)             # <<<<<<<<<<<<<<
 *     return vornet
 * 
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1073, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1072
 *     cdef ATOM_NETWORK* c_ha_atmnetptr = (<AtomNetwork?>ha_atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornetptr = (<VoronoiNetwork?>vornet).thisptr
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,             # <<<<<<<<<<<<<<
 *             c_ha_atmnetptr, delta)
 *     return vornet
 */
  prune_high_accuracy_voronoi_network(__pyx_v_c_vornetptr, __pyx_v_c_atmnetptr, __pyx_v_c_ha_atmnetptr, __pyx_t_10);

  /* "pyzeo/extension.pyx":1074
 *     prune_high_accuracy_voronoi_network(c_vornetptr, c_atmnetptr,
 *             c_ha_atmnetptr, delta)
 *     return vornet             # <<<<<<<<<<<<<<
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_vornet);
  __pyx_r = __pyx_v_vornet;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1061
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.pruned_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1076
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_65get_nearest_largest_diameter_highaccuracy_vornode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_64get_nearest_largest_diameter_highaccuracy_vornode[] = "\n    Get the reduced high accuracy voronoi network where only nodes that \n    has the largest diameter and within the cutoff distance to the nodes\n    of the low accuracy voronoi network are retained. A one-one mapping\n    of high accuracy voronoi nodes and low accuracy nodes is obtained.\n\n    Input:\n        atmnet: AtomNetwork object\n        delta: cutoff (default = 0.25 angstroms)\n    Output:\n        Reduced voronoi network\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_65get_nearest_largest_diameter_highaccuracy_vornode = {"get_nearest_largest_diameter_highaccuracy_vornode", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_65get_nearest_largest_diameter_highaccuracy_vornode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_64get_nearest_largest_diameter_highaccuracy_vornode};
static PyObject *__pyx_pw_5pyzeo_9extension_65get_nearest_largest_diameter_highaccuracy_vornode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nearest_largest_diameter_highaccuracy_vornode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_delta,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_25);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_nearest_largest_diameter_highaccuracy_vornode") < 0)) __PYX_ERR(1, 1076, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_nearest_largest_diameter_highaccuracy_vornode", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1076, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.get_nearest_largest_diameter_highaccuracy_vornode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_64get_nearest_largest_diameter_highaccuracy_vornode(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_64get_nearest_largest_diameter_highaccuracy_vornode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  VORONOI_NETWORK *__pyx_v_c_vornet_ptr;
  VORONOI_NETWORK *__pyx_v_c_ha_vornet_ptr;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_red_vornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  ATOM_NETWORK *__pyx_t_7;
  VORONOI_NETWORK *__pyx_t_8;
  float __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nearest_largest_diameter_highaccuracy_vornode", 0);

  /* "pyzeo/extension.pyx":1090
 *     """
 *     #generate_simplified_highaccuracy_voronoi_network(atmnet)
 *     ha_vornet = pruned_highaccuracy_voronoi_network(atmnet, delta=0.7)             # <<<<<<<<<<<<<<
 *     #print('')
 *     #print('**********ONE DECOMPOSITION.************')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pruned_highaccuracy_voronoi_netw); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_atmnet);
  __Pyx_GIVEREF(__pyx_v_atmnet);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_atmnet);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_delta, __pyx_float_0_7) < 0) __PYX_ERR(1, 1090, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ha_vornet = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pyzeo/extension.pyx":1094
 *     #print('**********ONE DECOMPOSITION.************')
 *     #print('')
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1094, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(1, 1094, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1094, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_ecs = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fcs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1095
 *     #print('')
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1095, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_7;

  /* "pyzeo/extension.pyx":1096
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 1096, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_c_vornet_ptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1097
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr             # <<<<<<<<<<<<<<
 *     red_vornet = VoronoiNetwork()
 *     #print('')
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 1097, __pyx_L1_error)
  __pyx_t_8 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_ha_vornet)->thisptr;
  __pyx_v_c_ha_vornet_ptr = __pyx_t_8;

  /* "pyzeo/extension.pyx":1098
 *     cdef VORONOI_NETWORK* c_vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     #print('')
 *     #print('*********WORKED TILL HERE*********')
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_red_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyzeo/extension.pyx":1103
 *     #print('')
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,
 *             c_atmnet_ptr, red_vornet.thisptr, delta)             # <<<<<<<<<<<<<<
 *     return red_vornet
 * 
 */
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1103, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1102
 *     #print('*********WORKED TILL HERE*********')
 *     #print('')
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,             # <<<<<<<<<<<<<<
 *             c_atmnet_ptr, red_vornet.thisptr, delta)
 *     return red_vornet
 */
  nearest_largest_diameter_ha_vornet(__pyx_v_c_ha_vornet_ptr, __pyx_v_c_vornet_ptr, __pyx_v_c_atmnet_ptr, __pyx_v_red_vornet->thisptr, __pyx_t_9);

  /* "pyzeo/extension.pyx":1104
 *     nearest_largest_diameter_ha_vornet(c_ha_vornet_ptr, c_vornet_ptr,
 *             c_atmnet_ptr, red_vornet.thisptr, delta)
 *     return red_vornet             # <<<<<<<<<<<<<<
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_red_vornet));
  __pyx_r = ((PyObject *)__pyx_v_red_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1076
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyzeo.extension.get_nearest_largest_diameter_highaccuracy_vornode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF((PyObject *)__pyx_v_red_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1106
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_67generate_simplified_highaccuracy_voronoi_network(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_66generate_simplified_highaccuracy_voronoi_network[] = "\n    Generate a simplified high accuracy voronoi network. \n    Uses Zeo++ high accuracy network and simplifies it such that only voronoi \n    nodes that belong to different atoms of original atom network are \n    retained. There can be different no. of voronoi nodes when compared with\n    the voronoi nodes obtained with regular tesselation. \n    Input:\n        atmnet: AtomNetwork object\n    Output:\n        Simplified high accuracy voronoi network\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_67generate_simplified_highaccuracy_voronoi_network = {"generate_simplified_highaccuracy_voronoi_network", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_67generate_simplified_highaccuracy_voronoi_network, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_66generate_simplified_highaccuracy_voronoi_network};
static PyObject *__pyx_pw_5pyzeo_9extension_67generate_simplified_highaccuracy_voronoi_network(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  CYTHON_UNUSED PyObject *__pyx_v_delta = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_simplified_highaccuracy_voronoi_network (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_delta,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_6);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_simplified_highaccuracy_voronoi_network") < 0)) __PYX_ERR(1, 1106, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_simplified_highaccuracy_voronoi_network", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.generate_simplified_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_66generate_simplified_highaccuracy_voronoi_network(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_66generate_simplified_highaccuracy_voronoi_network(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, CYTHON_UNUSED PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_node_size = NULL;
  PyObject *__pyx_v_ha_node_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_simplified_highaccuracy_voronoi_network", 0);

  /* "pyzeo/extension.pyx":1118
 *         Simplified high accuracy voronoi network
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1119
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "LOW")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_high_accuracy_atomnet); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_LOW};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_LOW};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ha_atmnet);
    __Pyx_GIVEREF(__pyx_v_ha_atmnet);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ha_atmnet);
    __Pyx_INCREF(__pyx_n_s_LOW);
    __Pyx_GIVEREF(__pyx_n_s_LOW);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_LOW);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1120
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1120, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(1, 1120, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1120, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_ecs = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_fcs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1121
 *     high_accuracy_atomnet(ha_atmnet, "LOW")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ha_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1121, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(1, 1121, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1121, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_ha_vornet = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_ecs, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_fcs, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1122
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()             # <<<<<<<<<<<<<<
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vornet, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1123
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()             # <<<<<<<<<<<<<<
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ha_vornet, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ha_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1124
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_size, __pyx_v_ha_node_size, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1124, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 1124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "pyzeo/extension.pyx":1125
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')             # <<<<<<<<<<<<<<
 *     return ha_vornet        # The processing below is eliminated temporarily
 *     node_size = vornet.size()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_kp_s_No_high_accuracy) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_No_high_accuracy);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1124
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily
 */
  }

  /* "pyzeo/extension.pyx":1126
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
 *     return ha_vornet        # The processing below is eliminated temporarily             # <<<<<<<<<<<<<<
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ha_vornet);
  __pyx_r = __pyx_v_ha_vornet;
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1106
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.generate_simplified_highaccuracy_voronoi_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_node_size);
  __Pyx_XDECREF(__pyx_v_ha_node_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1160
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_69prune_voronoi_network_close_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_68prune_voronoi_network_close_node[] = "\n    Generate a pruned high accuracy voronoi network. \n    Uses Zeo++ high accuracy network and simplifies it such that only voronoi \n    nodes that are farther than \"delta\" are retained. \n    Input:\n        atmnet: AtomNetwork object\n    Output:\n        Simplified high accuracy voronoi network\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_69prune_voronoi_network_close_node = {"prune_voronoi_network_close_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_69prune_voronoi_network_close_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_68prune_voronoi_network_close_node};
static PyObject *__pyx_pw_5pyzeo_9extension_69prune_voronoi_network_close_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_delta = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_voronoi_network_close_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_delta,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_voronoi_network_close_node") < 0)) __PYX_ERR(1, 1160, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_delta = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_voronoi_network_close_node", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.prune_voronoi_network_close_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_68prune_voronoi_network_close_node(__pyx_self, __pyx_v_atmnet, __pyx_v_delta);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_68prune_voronoi_network_close_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_delta) {
  PyObject *__pyx_v_ha_atmnet = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ecs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_ha_vornet = NULL;
  PyObject *__pyx_v_node_size = NULL;
  PyObject *__pyx_v_ha_node_size = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  VORONOI_NETWORK *__pyx_v_c_ha_vornet_ptr;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_red_vornet = NULL;
  struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *__pyx_v_pruned_vornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  ATOM_NETWORK *__pyx_t_9;
  VORONOI_NETWORK *__pyx_t_10;
  float __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_voronoi_network_close_node", 0);

  /* "pyzeo/extension.pyx":1170
 *         Simplified high accuracy voronoi network
 *     """
 *     ha_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ha_atmnet = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1171
 *     """
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")             # <<<<<<<<<<<<<<
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_high_accuracy_atomnet); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_MED};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_ha_atmnet, __pyx_n_s_MED};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ha_atmnet);
    __Pyx_GIVEREF(__pyx_v_ha_atmnet);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ha_atmnet);
    __Pyx_INCREF(__pyx_n_s_MED);
    __Pyx_GIVEREF(__pyx_n_s_MED);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_MED);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1172
 *     ha_atmnet = atmnet.copy()
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1172, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(1, 1172, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1172, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_ecs = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_fcs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyzeo/extension.pyx":1173
 *     high_accuracy_atomnet(ha_atmnet, "MED")
 *     vornet,ecs,fcs = atmnet.perform_voronoi_decomposition()
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()             # <<<<<<<<<<<<<<
 * 
 *     node_size = vornet.size()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ha_atmnet, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1173, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(1, 1173, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1173, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_ha_vornet = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_ecs, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_fcs, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":1175
 *     ha_vornet,ecs,fcs = ha_atmnet.perform_voronoi_decomposition()
 * 
 *     node_size = vornet.size()             # <<<<<<<<<<<<<<
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vornet, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1176
 * 
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()             # <<<<<<<<<<<<<<
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ha_vornet, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ha_node_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1177
 *     node_size = vornet.size()
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)             # <<<<<<<<<<<<<<
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_node_size);
  __Pyx_GIVEREF(__pyx_v_node_size);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_node_size);
  __Pyx_INCREF(__pyx_v_ha_node_size);
  __Pyx_GIVEREF(__pyx_v_ha_node_size);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ha_node_size);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1178
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *         #return vornet
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_size, __pyx_v_ha_node_size, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "pyzeo/extension.pyx":1179
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:
 *         warning('No high accuracy')             # <<<<<<<<<<<<<<
 *         #return vornet
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_kp_s_No_high_accuracy) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_No_high_accuracy);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1178
 *     ha_node_size = ha_vornet.size()
 *     print (node_size, ha_node_size)
 *     if node_size == ha_node_size:             # <<<<<<<<<<<<<<
 *         warning('No high accuracy')
 *         #return vornet
 */
  }

  /* "pyzeo/extension.pyx":1182
 *         #return vornet
 * 
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1182, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_9;

  /* "pyzeo/extension.pyx":1183
 * 
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr             # <<<<<<<<<<<<<<
 *     red_vornet = VoronoiNetwork()
 *     #print ''
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_ha_vornet, __pyx_ptype_5pyzeo_9extension_VoronoiNetwork)))) __PYX_ERR(1, 1183, __pyx_L1_error)
  __pyx_t_10 = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_v_ha_vornet)->thisptr;
  __pyx_v_c_ha_vornet_ptr = __pyx_t_10;

  /* "pyzeo/extension.pyx":1184
 *     cdef ATOM_NETWORK* c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef VORONOI_NETWORK* c_ha_vornet_ptr = (<VoronoiNetwork?>ha_vornet).thisptr
 *     red_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     #print ''
 *     #print '*********WORKED TILL HERE*********'
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_red_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1188
 *     #print '*********WORKED TILL HERE*********'
 *     #print ''
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,             # <<<<<<<<<<<<<<
 *             red_vornet.thisptr)
 *     print (red_vornet.size())
 */
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1188, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1189
 *     #print ''
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,
 *             red_vornet.thisptr)             # <<<<<<<<<<<<<<
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()
 */
  geometry_pruning(__pyx_v_c_ha_vornet_ptr, __pyx_v_c_atmnet_ptr, __pyx_t_11, __pyx_v_red_vornet->thisptr);

  /* "pyzeo/extension.pyx":1190
 *     geometry_pruning(c_ha_vornet_ptr, c_atmnet_ptr, delta,
 *             red_vornet.thisptr)
 *     print (red_vornet.size())             # <<<<<<<<<<<<<<
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_red_vornet), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1191
 *             red_vornet.thisptr)
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pruned_vornet = ((struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1193
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)             # <<<<<<<<<<<<<<
 *     print (pruned_vornet.size())
 *     return pruned_vornet
 */
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_delta); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1193, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1192
 *     print (red_vornet.size())
 *     pruned_vornet = VoronoiNetwork()
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,             # <<<<<<<<<<<<<<
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())
 */
  ha_prune_within_atom(__pyx_v_red_vornet->thisptr, __pyx_v_c_atmnet_ptr, __pyx_t_11, __pyx_v_pruned_vornet->thisptr);

  /* "pyzeo/extension.pyx":1194
 *     ha_prune_within_atom(red_vornet.thisptr, c_atmnet_ptr,
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())             # <<<<<<<<<<<<<<
 *     return pruned_vornet
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pruned_vornet), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1195
 *             delta, pruned_vornet.thisptr)
 *     print (pruned_vornet.size())
 *     return pruned_vornet             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pruned_vornet));
  __pyx_r = ((PyObject *)__pyx_v_pruned_vornet);
  goto __pyx_L0;

  /* "pyzeo/extension.pyx":1160
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.prune_voronoi_network_close_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ha_atmnet);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_ecs);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_ha_vornet);
  __Pyx_XDECREF(__pyx_v_node_size);
  __Pyx_XDECREF(__pyx_v_ha_node_size);
  __Pyx_XDECREF((PyObject *)__pyx_v_red_vornet);
  __Pyx_XDECREF((PyObject *)__pyx_v_pruned_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1199
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_71volume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_70volume[] = "\n    Calculates the volume of channels and pockets in a given strucutre.\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        high_accuracy_atmnet (Default=None):\n            pyzeo.netstorage.AtomNetwork\n            Optional high accuracy AtomNetwork. If not given and high_accuracy\n            flag is set to True, then it is computed and returned.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        low_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n        high_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n    Returns:\n        1) string containing channel and pocket volumes\n        2) if high_accuracy=True and no input high_accuracy_atmnet is given,\n           returns high_accuracy_atmnet for future use.\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_71volume = {"volume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_71volume, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_70volume};
static PyObject *__pyx_pw_5pyzeo_9extension_71volume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_high_accuracy_atmnet = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_low_dist_range = 0;
  PyObject *__pyx_v_high_dist_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_channel_radius,&__pyx_n_s_probe_radius,&__pyx_n_s_mc_sampling_no,&__pyx_n_s_high_accuracy,&__pyx_n_s_high_accuracy_atmnet,&__pyx_n_s_exclude_pockets,&__pyx_n_s_low_dist_range,&__pyx_n_s_high_dist_range,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "pyzeo/extension.pyx":1200
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 *     """
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_None);

    /* "pyzeo/extension.pyx":1201
 * def volume(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):             # <<<<<<<<<<<<<<
 *     """
 *     Calculates the volume of channels and pockets in a given strucutre.
 */
    values[6] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)__pyx_int_neg_1);
    values[8] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_channel_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, 1); __PYX_ERR(1, 1199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probe_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, 2); __PYX_ERR(1, 1199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mc_sampling_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, 3); __PYX_ERR(1, 1199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_accuracy);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_accuracy_atmnet);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_pockets);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_low_dist_range);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_dist_range);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "volume") < 0)) __PYX_ERR(1, 1199, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_high_accuracy = values[4];
    __pyx_v_high_accuracy_atmnet = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_low_dist_range = values[7];
    __pyx_v_high_dist_range = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volume", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_70volume(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_high_accuracy, __pyx_v_high_accuracy_atmnet, __pyx_v_exclude_pockets, __pyx_v_low_dist_range, __pyx_v_high_dist_range);

  /* "pyzeo/extension.pyx":1199
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_70volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_low_dist_range, PyObject *__pyx_v_high_dist_range) {
  int __pyx_v_ret_high_acc_atmnet;
  ATOM_NETWORK *__pyx_v_c_org_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  PyObject *__pyx_v_tmp_atmnet = NULL;
  std::string __pyx_v_vol_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  ATOM_NETWORK *__pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volume", 0);
  __Pyx_INCREF(__pyx_v_high_accuracy);
  __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);

  /* "pyzeo/extension.pyx":1230
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1230, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1230, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1231
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_high_accuracy_atmnet, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1232
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)             # <<<<<<<<<<<<<<
 *         ret_high_acc_atmnet = True
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_high_accuracy_atomnet); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_high_accuracy_atmnet) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_high_accuracy_atmnet);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1233
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True             # <<<<<<<<<<<<<<
 *     else:
 *         ret_high_acc_atmnet = False
 */
    __pyx_v_ret_high_acc_atmnet = 1;

    /* "pyzeo/extension.pyx":1230
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 */
    goto __pyx_L3;
  }

  /* "pyzeo/extension.pyx":1235
 *         ret_high_acc_atmnet = True
 *     else:
 *         ret_high_acc_atmnet = False             # <<<<<<<<<<<<<<
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 */
  /*else*/ {
    __pyx_v_ret_high_acc_atmnet = 0;
  }
  __pyx_L3:;

  /* "pyzeo/extension.pyx":1237
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1237, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1238
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 *         high_accuracy = True             # <<<<<<<<<<<<<<
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_high_accuracy, Py_True);

    /* "pyzeo/extension.pyx":1237
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
 */
  }

  /* "pyzeo/extension.pyx":1240
 *         high_accuracy = True
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1240, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_org_atmnet_ptr = __pyx_t_7;

  /* "pyzeo/extension.pyx":1242
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 1242, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1243
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     else:
 *         tmp_atmnet = atmnet.copy()
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_high_accuracy_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1243, __pyx_L1_error)
    __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_high_accuracy_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_7;

    /* "pyzeo/extension.pyx":1242
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 */
    goto __pyx_L9;
  }

  /* "pyzeo/extension.pyx":1245
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 *         tmp_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_tmp_atmnet = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1246
 *     else:
 *         tmp_atmnet = atmnet.copy()
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr             # <<<<<<<<<<<<<<
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_tmp_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1246, __pyx_L1_error)
    __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_tmp_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_7;
  }
  __pyx_L9:;

  /* "pyzeo/extension.pyx":1248
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1248, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1249
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *             low_dist_range, high_dist_range)
 *     #print vol_str
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1249, __pyx_L1_error)
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1249, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1249, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1249, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1250
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)             # <<<<<<<<<<<<<<
 *     #print vol_str
 *     if ret_high_acc_atmnet:
 */
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_low_dist_range); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1250, __pyx_L1_error)
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_high_dist_range); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1250, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1248
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     vol_str = calcAV(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             low_dist_range, high_dist_range)
 */
  __pyx_v_vol_str = calcAV(__pyx_v_c_atmnet_ptr, __pyx_v_c_org_atmnet_ptr, __pyx_t_1, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_2, __pyx_t_11, __pyx_t_12);

  /* "pyzeo/extension.pyx":1252
 *             low_dist_range, high_dist_range)
 *     #print vol_str
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return vol_str, high_accuracy_atmnet
 *     else:
 */
  __pyx_t_2 = (__pyx_v_ret_high_acc_atmnet != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":1253
 *     #print vol_str
 *     if ret_high_acc_atmnet:
 *         return vol_str, high_accuracy_atmnet             # <<<<<<<<<<<<<<
 *     else:
 *         return vol_str
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_vol_str); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);
    __Pyx_GIVEREF(__pyx_v_high_accuracy_atmnet);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_high_accuracy_atmnet);
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pyzeo/extension.pyx":1252
 *             low_dist_range, high_dist_range)
 *     #print vol_str
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return vol_str, high_accuracy_atmnet
 *     else:
 */
  }

  /* "pyzeo/extension.pyx":1255
 *         return vol_str, high_accuracy_atmnet
 *     else:
 *         return vol_str             # <<<<<<<<<<<<<<
 * 
 *     #lines = vol_str.split('\n')
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_vol_str); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "pyzeo/extension.pyx":1199
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp_atmnet);
  __Pyx_XDECREF(__pyx_v_high_accuracy);
  __Pyx_XDECREF(__pyx_v_high_accuracy_atmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1263
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_73surface_area(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_72surface_area[] = "\n    Calculates the surface area of channels and pockets in a given strucutre.\n    Args:\n        atmnet:\n            zoe.storage.AtomNetwork\n        channel_radius:\n            Radius of probe used to determine the accessibility of void space.\n        probe_radius:\n            Radius of probe used in Monte Carlo (MC) sampling of surface.\n        mc_sampling_no:\n            No. of MC samples per atom\n        high_accuracy (Default=False):\n            Optional flag to use high accuracy.\n        high_accuracy_atmnet (Default=None):\n            pyzeo.netstorage.AtomNetwork\n            Optional high accuracy AtomNetwork. If not given and high_accuracy\n            flag is set to True, then it is computed and returned.\n        exclude_pockets (Default=True):\n            Optional flag to include pockets.\n        low_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n        high_dist_range(Default=-1):\n            Use if you know the C++ Zeo++ code.\n    Returns:\n        1) string containing channel and pocket surface area\n        2) if high_accuracy=True and no input high_accuracy_atmnet is given,\n           returns high_accuracy_atmnet for future use.\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_73surface_area = {"surface_area", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_73surface_area, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_72surface_area};
static PyObject *__pyx_pw_5pyzeo_9extension_73surface_area(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_channel_radius = 0;
  PyObject *__pyx_v_probe_radius = 0;
  PyObject *__pyx_v_mc_sampling_no = 0;
  PyObject *__pyx_v_high_accuracy = 0;
  PyObject *__pyx_v_high_accuracy_atmnet = 0;
  PyObject *__pyx_v_exclude_pockets = 0;
  PyObject *__pyx_v_extended_output = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("surface_area (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_channel_radius,&__pyx_n_s_probe_radius,&__pyx_n_s_mc_sampling_no,&__pyx_n_s_high_accuracy,&__pyx_n_s_high_accuracy_atmnet,&__pyx_n_s_exclude_pockets,&__pyx_n_s_extended_output,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "pyzeo/extension.pyx":1264
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,             # <<<<<<<<<<<<<<
 *         exclude_pockets=True, extended_output=False):
 * 
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_None);

    /* "pyzeo/extension.pyx":1265
 * def surface_area(atmnet, channel_radius, probe_radius,
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
    values[6] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_channel_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, 1); __PYX_ERR(1, 1263, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probe_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, 2); __PYX_ERR(1, 1263, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mc_sampling_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, 3); __PYX_ERR(1, 1263, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_accuracy);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_high_accuracy_atmnet);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exclude_pockets);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_extended_output);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "surface_area") < 0)) __PYX_ERR(1, 1263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_channel_radius = values[1];
    __pyx_v_probe_radius = values[2];
    __pyx_v_mc_sampling_no = values[3];
    __pyx_v_high_accuracy = values[4];
    __pyx_v_high_accuracy_atmnet = values[5];
    __pyx_v_exclude_pockets = values[6];
    __pyx_v_extended_output = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("surface_area", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.surface_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_72surface_area(__pyx_self, __pyx_v_atmnet, __pyx_v_channel_radius, __pyx_v_probe_radius, __pyx_v_mc_sampling_no, __pyx_v_high_accuracy, __pyx_v_high_accuracy_atmnet, __pyx_v_exclude_pockets, __pyx_v_extended_output);

  /* "pyzeo/extension.pyx":1263
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_72surface_area(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_channel_radius, PyObject *__pyx_v_probe_radius, PyObject *__pyx_v_mc_sampling_no, PyObject *__pyx_v_high_accuracy, PyObject *__pyx_v_high_accuracy_atmnet, PyObject *__pyx_v_exclude_pockets, PyObject *__pyx_v_extended_output) {
  int __pyx_v_ret_high_acc_atmnet;
  ATOM_NETWORK *__pyx_v_c_org_atmnet_ptr;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  PyObject *__pyx_v_tmp_atmnet = NULL;
  std::string __pyx_v_sa_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  ATOM_NETWORK *__pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("surface_area", 0);
  __Pyx_INCREF(__pyx_v_high_accuracy);
  __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);

  /* "pyzeo/extension.pyx":1295
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1295, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1296
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_high_accuracy_atmnet, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1297
 *     if high_accuracy and not high_accuracy_atmnet:
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)             # <<<<<<<<<<<<<<
 *         ret_high_acc_atmnet = True
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_high_accuracy_atomnet); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_high_accuracy_atmnet) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_high_accuracy_atmnet);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1298
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 *         ret_high_acc_atmnet = True             # <<<<<<<<<<<<<<
 *     else:
 *         ret_high_acc_atmnet = False
 */
    __pyx_v_ret_high_acc_atmnet = 1;

    /* "pyzeo/extension.pyx":1295
 *            returns high_accuracy_atmnet for future use.
 *     """
 *     if high_accuracy and not high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         high_accuracy_atmnet = atmnet.copy()
 *         high_accuracy_atomnet(high_accuracy_atmnet)
 */
    goto __pyx_L3;
  }

  /* "pyzeo/extension.pyx":1300
 *         ret_high_acc_atmnet = True
 *     else:
 *         ret_high_acc_atmnet = False             # <<<<<<<<<<<<<<
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 */
  /*else*/ {
    __pyx_v_ret_high_acc_atmnet = 0;
  }
  __pyx_L3:;

  /* "pyzeo/extension.pyx":1302
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1302, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1302, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1303
 * 
 *     if high_accuracy_atmnet and not high_accuracy:
 *         high_accuracy = True             # <<<<<<<<<<<<<<
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_high_accuracy, Py_True);

    /* "pyzeo/extension.pyx":1302
 *         ret_high_acc_atmnet = False
 * 
 *     if high_accuracy_atmnet and not high_accuracy:             # <<<<<<<<<<<<<<
 *         high_accuracy = True
 * 
 */
  }

  /* "pyzeo/extension.pyx":1305
 *         high_accuracy = True
 * 
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1305, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_org_atmnet_ptr = __pyx_t_7;

  /* "pyzeo/extension.pyx":1307
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy_atmnet); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 1307, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyzeo/extension.pyx":1308
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr             # <<<<<<<<<<<<<<
 *     else:
 *         tmp_atmnet = atmnet.copy()
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_high_accuracy_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1308, __pyx_L1_error)
    __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_high_accuracy_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_7;

    /* "pyzeo/extension.pyx":1307
 *     cdef ATOM_NETWORK* c_org_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     cdef ATOM_NETWORK* c_atmnet_ptr
 *     if high_accuracy_atmnet:             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 */
    goto __pyx_L9;
  }

  /* "pyzeo/extension.pyx":1310
 *         c_atmnet_ptr = (<AtomNetwork?>high_accuracy_atmnet).thisptr
 *     else:
 *         tmp_atmnet = atmnet.copy()             # <<<<<<<<<<<<<<
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_tmp_atmnet = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyzeo/extension.pyx":1311
 *     else:
 *         tmp_atmnet = atmnet.copy()
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr             # <<<<<<<<<<<<<<
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_tmp_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1311, __pyx_L1_error)
    __pyx_t_7 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_tmp_atmnet)->thisptr;
    __pyx_v_c_atmnet_ptr = __pyx_t_7;
  }
  __pyx_L9:;

  /* "pyzeo/extension.pyx":1313
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_high_accuracy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1313, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1314
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,             # <<<<<<<<<<<<<<
 *             extended_output)
 *     if ret_high_acc_atmnet:
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_channel_radius); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1314, __pyx_L1_error)
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_probe_radius); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1314, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_mc_sampling_no); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1314, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_pockets); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1314, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1315
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)             # <<<<<<<<<<<<<<
 *     if ret_high_acc_atmnet:
 *         return sa_str, high_accuracy_atmnet
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_extended_output); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1315, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1313
 *         c_atmnet_ptr = (<AtomNetwork?>tmp_atmnet).thisptr
 * 
 *     sa_str = calcASA(c_atmnet_ptr, c_org_atmnet_ptr, high_accuracy,             # <<<<<<<<<<<<<<
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 */
  __pyx_v_sa_str = calcASA(__pyx_v_c_atmnet_ptr, __pyx_v_c_org_atmnet_ptr, __pyx_t_1, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_2, __pyx_t_3);

  /* "pyzeo/extension.pyx":1316
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return sa_str, high_accuracy_atmnet
 *     else:
 */
  __pyx_t_3 = (__pyx_v_ret_high_acc_atmnet != 0);
  if (__pyx_t_3) {

    /* "pyzeo/extension.pyx":1317
 *             extended_output)
 *     if ret_high_acc_atmnet:
 *         return sa_str, high_accuracy_atmnet             # <<<<<<<<<<<<<<
 *     else:
 *         return sa_str
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_sa_str); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_high_accuracy_atmnet);
    __Pyx_GIVEREF(__pyx_v_high_accuracy_atmnet);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_high_accuracy_atmnet);
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pyzeo/extension.pyx":1316
 *             channel_radius, probe_radius, mc_sampling_no, exclude_pockets,
 *             extended_output)
 *     if ret_high_acc_atmnet:             # <<<<<<<<<<<<<<
 *         return sa_str, high_accuracy_atmnet
 *     else:
 */
  }

  /* "pyzeo/extension.pyx":1319
 *         return sa_str, high_accuracy_atmnet
 *     else:
 *         return sa_str             # <<<<<<<<<<<<<<
 * 
 * #=============================================================================
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_sa_str); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "pyzeo/extension.pyx":1263
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyzeo.extension.surface_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp_atmnet);
  __Pyx_XDECREF(__pyx_v_high_accuracy);
  __Pyx_XDECREF(__pyx_v_high_accuracy_atmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyzeo/extension.pyx":1327
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pyzeo_9extension_75high_accuracy_atomnet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pyzeo_9extension_74high_accuracy_atomnet[] = "\n    Increases the accuracy of voronoi decomposition by replacing big\n    atoms (spheres) with a number of small spheres.\n    *** Modifies atmnet argument in place ***\n    Args:\n        atmnet:\n            pyzeo.netstorage.AtomNetwork\n            Is modified in place.\n        accuracy_setting: \n            String specifying the accuracy settings.\n            Possible choices are \"OCC\",\"FCC\",\"ACC\",\"AQC\",\"DDH\",\n            \"TIH\",\"ICH\",\"ICC\",\"RIH\",\"S4\",\"S10\",\"S20\",\"S30\",\"S40\",\"S50\",\n            \"S100\",\"S500\",\"S1000\",\"S10000\",\"DEF\",\"HI\",\"MED\",\"LOW\".\n            Default is \"DEF\".\n    ";
static PyMethodDef __pyx_mdef_5pyzeo_9extension_75high_accuracy_atomnet = {"high_accuracy_atomnet", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_75high_accuracy_atomnet, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_74high_accuracy_atomnet};
static PyObject *__pyx_pw_5pyzeo_9extension_75high_accuracy_atomnet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_accuracy_setting = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("high_accuracy_atomnet (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_accuracy_setting,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_s_LOW);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_accuracy_setting);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "high_accuracy_atomnet") < 0)) __PYX_ERR(1, 1327, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_accuracy_setting = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("high_accuracy_atomnet", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1327, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyzeo.extension.high_accuracy_atomnet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pyzeo_9extension_74high_accuracy_atomnet(__pyx_self, __pyx_v_atmnet, __pyx_v_accuracy_setting);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pyzeo_9extension_74high_accuracy_atomnet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_accuracy_setting) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::string __pyx_v_acc_set;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  ATOM_NETWORK *__pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("high_accuracy_atomnet", 0);
  __Pyx_INCREF(__pyx_v_accuracy_setting);

  /* "pyzeo/extension.pyx":1343
 *             Default is "DEF".
 *     """
 *     if not accuracy_setting in _accuracy_kw:             # <<<<<<<<<<<<<<
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_accuracy_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_accuracy_setting, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pyzeo/extension.pyx":1344
 *     """
 *     if not accuracy_setting in _accuracy_kw:
 *         raise ValueError("Accuracy setting not understood")             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1344, __pyx_L1_error)

    /* "pyzeo/extension.pyx":1343
 *             Default is "DEF".
 *     """
 *     if not accuracy_setting in _accuracy_kw:             # <<<<<<<<<<<<<<
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 */
  }

  /* "pyzeo/extension.pyx":1345
 *     if not accuracy_setting in _accuracy_kw:
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_5pyzeo_9extension_AtomNetwork)))) __PYX_ERR(1, 1345, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_5pyzeo_9extension_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_4;

  /* "pyzeo/extension.pyx":1346
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):             # <<<<<<<<<<<<<<
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
 */
  __pyx_t_3 = PyUnicode_Check(__pyx_v_accuracy_setting); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pyzeo/extension.pyx":1347
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef string acc_set = accuracy_setting
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)
 */
    if (unlikely(__pyx_v_accuracy_setting == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 1347, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_accuracy_setting)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_accuracy_setting, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyzeo/extension.pyx":1346
 *         raise ValueError("Accuracy setting not understood")
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):             # <<<<<<<<<<<<<<
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
 */
  }

  /* "pyzeo/extension.pyx":1348
 *     if isinstance(accuracy_setting, unicode):
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting             # <<<<<<<<<<<<<<
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_accuracy_setting); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1348, __pyx_L1_error)
  __pyx_v_acc_set = __pyx_t_5;

  /* "pyzeo/extension.pyx":1349
 *         accuracy_setting = (<unicode>accuracy_setting).encode('utf8')
 *     cdef string acc_set = accuracy_setting
 *     setupHighAccuracyAtomNetwork(c_atmnetptr, acc_set)             # <<<<<<<<<<<<<<
 */
  setupHighAccuracyAtomNetwork(__pyx_v_c_atmnetptr, __pyx_v_acc_set);

  /* "pyzeo/extension.pyx":1327
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyzeo.extension.high_accuracy_atomnet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_accuracy_setting);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5pyzeo_9extension_Xyz(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_3Xyz_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Xyz(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_3Xyz_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1x_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1y_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_3Xyz_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_3Xyz_1z_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_3Xyz_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_3Xyz_1z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Xyz[] = {
  {"scale", (PyCFunction)__pyx_pw_5pyzeo_9extension_3Xyz_7scale, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_3Xyz_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_3Xyz_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Xyz[] = {
  {(char *)"x", __pyx_getprop_5pyzeo_9extension_3Xyz_x, __pyx_setprop_5pyzeo_9extension_3Xyz_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_5pyzeo_9extension_3Xyz_y, __pyx_setprop_5pyzeo_9extension_3Xyz_y, (char *)0, 0},
  {(char *)"z", __pyx_getprop_5pyzeo_9extension_3Xyz_z, __pyx_setprop_5pyzeo_9extension_3Xyz_z, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_Xyz = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.Xyz", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Xyz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Xyz, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store a point\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Xyz, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Xyz, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_3Xyz_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Xyz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_Point(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_5Point_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Point(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_5Point_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1x_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1y_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_5Point_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_5Point_1z_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_5Point_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_5Point_1z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Point[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_5Point_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_5Point_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Point[] = {
  {(char *)"x", __pyx_getprop_5pyzeo_9extension_5Point_x, __pyx_setprop_5pyzeo_9extension_5Point_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_5pyzeo_9extension_5Point_y, __pyx_setprop_5pyzeo_9extension_5Point_y, (char *)0, 0},
  {(char *)"z", __pyx_getprop_5pyzeo_9extension_5Point_z, __pyx_setprop_5pyzeo_9extension_5Point_z, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_Point = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.Point", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Point), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Point, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5pyzeo_9extension_5Point_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store a point\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Point, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Point, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_5Point_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Point, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_Channel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_7Channel_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Channel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_7Channel_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Channel[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_7Channel_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_7Channel_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_Channel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.Channel", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Channel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Channel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Python wrapper to Zeo++ Channel.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Channel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Channel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_Atom(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_4Atom_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Atom(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_4Atom_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzeo_9extension_4Atom_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_4Atom_6coords_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_4Atom_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_4Atom_6coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_4Atom_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_4Atom_6radius_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_4Atom_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_4Atom_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_Atom[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_4Atom_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_4Atom_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_Atom[] = {
  {(char *)"coords", __pyx_getprop_5pyzeo_9extension_4Atom_coords, __pyx_setprop_5pyzeo_9extension_4Atom_coords, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_5pyzeo_9extension_4Atom_radius, __pyx_setprop_5pyzeo_9extension_4Atom_radius, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_Atom = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.Atom", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Atom), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Atom, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the information about atom (or ion) in a structure.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_Atom, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_Atom, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_4Atom_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Atom, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_AtomNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_11AtomNetwork_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_11AtomNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_AtomNetwork[] = {
  {"copy", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_7copy, METH_NOARGS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_6copy},
  {"read_from_CIF", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_9read_from_CIF, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_8read_from_CIF},
  {"read_from_ARC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_11read_from_ARC, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_10read_from_ARC},
  {"read_from_CSSR", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_13read_from_CSSR, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_12read_from_CSSR},
  {"read_from_V1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_15read_from_V1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_14read_from_V1},
  {"write_to_CSSR", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_17write_to_CSSR, METH_O, __pyx_doc_5pyzeo_9extension_11AtomNetwork_16write_to_CSSR},
  {"write_to_CIF", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_19write_to_CIF, METH_O, __pyx_doc_5pyzeo_9extension_11AtomNetwork_18write_to_CIF},
  {"write_to_V1", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_21write_to_V1, METH_O, __pyx_doc_5pyzeo_9extension_11AtomNetwork_20write_to_V1},
  {"write_to_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_23write_to_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_22write_to_XYZ},
  {"write_to_VTK", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_25write_to_VTK, METH_O, __pyx_doc_5pyzeo_9extension_11AtomNetwork_24write_to_VTK},
  {"write_to_MOPAC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_27write_to_MOPAC, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_26write_to_MOPAC},
  {"calculate_free_sphere_parameters", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_29calculate_free_sphere_parameters, METH_O, __pyx_doc_5pyzeo_9extension_11AtomNetwork_28calculate_free_sphere_parameters},
  {"perform_voronoi_decomposition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_11AtomNetwork_31perform_voronoi_decomposition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_11AtomNetwork_30perform_voronoi_decomposition},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_33__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_11AtomNetwork_35__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_AtomNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.AtomNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_AtomNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_AtomNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store and manipulate the input atom network.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_AtomNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_11AtomNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_AtomNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_11VoronoiNode_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_11VoronoiNode_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5pyzeo_9extension_11VoronoiNode_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_11VoronoiNode_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5pyzeo_9extension_11VoronoiNode_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_1__get__(o);
}

static int __pyx_setprop_5pyzeo_9extension_11VoronoiNode_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5pyzeo_9extension_11VoronoiNode_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VoronoiNode[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_11VoronoiNode_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_11VoronoiNode_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pyzeo_9extension_VoronoiNode[] = {
  {(char *)"coords", __pyx_getprop_5pyzeo_9extension_11VoronoiNode_coords, __pyx_setprop_5pyzeo_9extension_11VoronoiNode_coords, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_5pyzeo_9extension_11VoronoiNode_radius, __pyx_setprop_5pyzeo_9extension_11VoronoiNode_radius, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_VoronoiNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.VoronoiNode", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the voronoi nodes with coordinates and radius\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VoronoiNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pyzeo_9extension_VoronoiNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_11VoronoiNode_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VoronoiNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_VoronoiNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VoronoiNetwork[] = {
  {"size", (PyCFunction)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_7size, METH_NOARGS, 0},
  {"prune", (PyCFunction)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_9prune, METH_O, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_8prune},
  {"analyze_writeto_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_11analyze_writeto_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_10analyze_writeto_XYZ},
  {"write_to_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_13write_to_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_12write_to_XYZ},
  {"perform_voronoi_decomposition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_15perform_voronoi_decomposition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5pyzeo_9extension_14VoronoiNetwork_14perform_voronoi_decomposition},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_14VoronoiNetwork_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_VoronoiNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.VoronoiNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VoronoiNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VoronoiNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the Voronoi network generated from Voronoi decomposition\n    of atom network.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VoronoiNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_14VoronoiNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VoronoiNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_DijkstraNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_15DijkstraNetwork_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_DijkstraNetwork[] = {
  {"from_VoronoiNetwork", (PyCFunction)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_3from_VoronoiNetwork, METH_NOARGS, __pyx_doc_5pyzeo_9extension_15DijkstraNetwork_2from_VoronoiNetwork},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_15DijkstraNetwork_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_DijkstraNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.DijkstraNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_DijkstraNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_DijkstraNetwork, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Python wrapper class to Zeo++ Djikstra Network\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_DijkstraNetwork, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_DijkstraNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_VorFace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VorFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5pyzeo_9extension_VorFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.VorFace", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VorFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VorFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_VorCell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_7VorCell_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_VorCell(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_7VorCell_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_VorCell[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_7VorCell_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_7VorCell_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_VorCell = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.VorCell", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_VorCell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_VorCell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_VorCell, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_7VorCell_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_VorCell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_BasicVCell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5pyzeo_9extension_10BasicVCell_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_BasicVCell(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5pyzeo_9extension_10BasicVCell_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5pyzeo_9extension_BasicVCell[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_10BasicVCell_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5pyzeo_9extension_10BasicVCell_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pyzeo_9extension_BasicVCell = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.BasicVCell", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_BasicVCell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_BasicVCell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pyzeo_9extension_BasicVCell, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pyzeo_9extension_10BasicVCell_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_BasicVCell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5pyzeo_9extension_Cycle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension_Cycle(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5pyzeo_9extension_Cycle = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.Cycle", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension_Cycle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension_Cycle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython wrapper class for Zeo++ CYCLE class.\n    Contains a pointer to CYCLE\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension_Cycle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *__pyx_freelist_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition[8];
static int __pyx_freecount_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition = 0;

static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition)))) {
    o = (PyObject*)__pyx_freelist_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition[--__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition];
    memset(o, 0, sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_edge_center);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition)))) {
    __pyx_freelist_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition[__pyx_freecount_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition++] = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)o;
  if (p->__pyx_v_edge_center) {
    e = (*v)(p->__pyx_v_edge_center, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition *)o;
  tmp = ((PyObject*)p->__pyx_v_edge_center);
  p->__pyx_v_edge_center = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.__pyx_scope_struct__perform_voronoi_decomposition", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition, /*tp_traverse*/
  __pyx_tp_clear_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *__pyx_freelist_5pyzeo_9extension___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5pyzeo_9extension___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5pyzeo_9extension___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5pyzeo_9extension___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5pyzeo_9extension___pyx_scope_struct_1_genexpr[--__pyx_freecount_5pyzeo_9extension___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5pyzeo_9extension___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5pyzeo_9extension___pyx_scope_struct_1_genexpr[__pyx_freecount_5pyzeo_9extension___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyzeo.extension.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5pyzeo_9extension___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pyzeo_9extension___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pyzeo_9extension___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pyzeo_9extension___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_extension(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_extension},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "extension",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ACC, __pyx_k_ACC, sizeof(__pyx_k_ACC), 0, 0, 1, 1},
  {&__pyx_n_s_AQC, __pyx_k_AQC, sizeof(__pyx_k_AQC), 0, 0, 1, 1},
  {&__pyx_kp_s_Accuracy_setting_not_understood, __pyx_k_Accuracy_setting_not_understood, sizeof(__pyx_k_Accuracy_setting_not_understood), 0, 0, 1, 0},
  {&__pyx_n_s_Atom, __pyx_k_Atom, sizeof(__pyx_k_Atom), 0, 0, 1, 1},
  {&__pyx_n_s_AtomNetwork, __pyx_k_AtomNetwork, sizeof(__pyx_k_AtomNetwork), 0, 0, 1, 1},
  {&__pyx_n_s_BasicVCell, __pyx_k_BasicVCell, sizeof(__pyx_k_BasicVCell), 0, 0, 1, 1},
  {&__pyx_n_s_Channel, __pyx_k_Channel, sizeof(__pyx_k_Channel), 0, 0, 1, 1},
  {&__pyx_n_s_Cycle, __pyx_k_Cycle, sizeof(__pyx_k_Cycle), 0, 0, 1, 1},
  {&__pyx_n_s_DDH, __pyx_k_DDH, sizeof(__pyx_k_DDH), 0, 0, 1, 1},
  {&__pyx_n_s_DEF, __pyx_k_DEF, sizeof(__pyx_k_DEF), 0, 0, 1, 1},
  {&__pyx_n_s_DijkstraNetwork, __pyx_k_DijkstraNetwork, sizeof(__pyx_k_DijkstraNetwork), 0, 0, 1, 1},
  {&__pyx_n_s_FCC, __pyx_k_FCC, sizeof(__pyx_k_FCC), 0, 0, 1, 1},
  {&__pyx_n_s_HI, __pyx_k_HI, sizeof(__pyx_k_HI), 0, 0, 1, 1},
  {&__pyx_n_s_ICC, __pyx_k_ICC, sizeof(__pyx_k_ICC), 0, 0, 1, 1},
  {&__pyx_n_s_ICH, __pyx_k_ICH, sizeof(__pyx_k_ICH), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_LOW, __pyx_k_LOW, sizeof(__pyx_k_LOW), 0, 0, 1, 1},
  {&__pyx_n_s_MED, __pyx_k_MED, sizeof(__pyx_k_MED), 0, 0, 1, 1},
  {&__pyx_kp_s_No_high_accuracy, __pyx_k_No_high_accuracy, sizeof(__pyx_k_No_high_accuracy), 0, 0, 1, 0},
  {&__pyx_n_s_OCC, __pyx_k_OCC, sizeof(__pyx_k_OCC), 0, 0, 1, 1},
  {&__pyx_n_s_Point, __pyx_k_Point, sizeof(__pyx_k_Point), 0, 0, 1, 1},
  {&__pyx_n_s_RIH, __pyx_k_RIH, sizeof(__pyx_k_RIH), 0, 0, 1, 1},
  {&__pyx_n_s_S10, __pyx_k_S10, sizeof(__pyx_k_S10), 0, 0, 1, 1},
  {&__pyx_n_s_S100, __pyx_k_S100, sizeof(__pyx_k_S100), 0, 0, 1, 1},
  {&__pyx_n_s_S1000, __pyx_k_S1000, sizeof(__pyx_k_S1000), 0, 0, 1, 1},
  {&__pyx_n_s_S10000, __pyx_k_S10000, sizeof(__pyx_k_S10000), 0, 0, 1, 1},
  {&__pyx_n_s_S20, __pyx_k_S20, sizeof(__pyx_k_S20), 0, 0, 1, 1},
  {&__pyx_n_s_S30, __pyx_k_S30, sizeof(__pyx_k_S30), 0, 0, 1, 1},
  {&__pyx_n_s_S4, __pyx_k_S4, sizeof(__pyx_k_S4), 0, 0, 1, 1},
  {&__pyx_n_s_S40, __pyx_k_S40, sizeof(__pyx_k_S40), 0, 0, 1, 1},
  {&__pyx_n_s_S50, __pyx_k_S50, sizeof(__pyx_k_S50), 0, 0, 1, 1},
  {&__pyx_n_s_S500, __pyx_k_S500, sizeof(__pyx_k_S500), 0, 0, 1, 1},
  {&__pyx_n_s_TIH, __pyx_k_TIH, sizeof(__pyx_k_TIH), 0, 0, 1, 1},
  {&__pyx_kp_s_This_value_is_not_supposed_to_be, __pyx_k_This_value_is_not_supposed_to_be, sizeof(__pyx_k_This_value_is_not_supposed_to_be), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VorCell, __pyx_k_VorCell, sizeof(__pyx_k_VorCell), 0, 0, 1, 1},
  {&__pyx_n_s_VorFace, __pyx_k_VorFace, sizeof(__pyx_k_VorFace), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiNetwork, __pyx_k_VoronoiNetwork, sizeof(__pyx_k_VoronoiNetwork), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiNode, __pyx_k_VoronoiNode, sizeof(__pyx_k_VoronoiNode), 0, 0, 1, 1},
  {&__pyx_n_s_WARNING, __pyx_k_WARNING, sizeof(__pyx_k_WARNING), 0, 0, 1, 1},
  {&__pyx_n_s_Xyz, __pyx_k_Xyz, sizeof(__pyx_k_Xyz), 0, 0, 1, 1},
  {&__pyx_kp_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_n_s_acc_set, __pyx_k_acc_set, sizeof(__pyx_k_acc_set), 0, 0, 1, 1},
  {&__pyx_n_s_accuracy_kw, __pyx_k_accuracy_kw, sizeof(__pyx_k_accuracy_kw), 0, 0, 1, 1},
  {&__pyx_n_s_accuracy_setting, __pyx_k_accuracy_setting, sizeof(__pyx_k_accuracy_setting), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_atmnet, __pyx_k_atmnet, sizeof(__pyx_k_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_atmnet_copy, __pyx_k_atmnet_copy, sizeof(__pyx_k_atmnet_copy), 0, 0, 1, 1},
  {&__pyx_n_s_c_atmnet, __pyx_k_c_atmnet, sizeof(__pyx_k_c_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_c_atmnet_ptr, __pyx_k_c_atmnet_ptr, sizeof(__pyx_k_c_atmnet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_atmnetcp_ptr, __pyx_k_c_atmnetcp_ptr, sizeof(__pyx_k_c_atmnetcp_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_atmnetptr, __pyx_k_c_atmnetptr, sizeof(__pyx_k_c_atmnetptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_filename, __pyx_k_c_filename, sizeof(__pyx_k_c_filename), 0, 0, 1, 1},
  {&__pyx_n_s_c_ha_atmnetptr, __pyx_k_c_ha_atmnetptr, sizeof(__pyx_k_c_ha_atmnetptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_ha_vornet_ptr, __pyx_k_c_ha_vornet_ptr, sizeof(__pyx_k_c_ha_vornet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_org_atmnet_ptr, __pyx_k_c_org_atmnet_ptr, sizeof(__pyx_k_c_org_atmnet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_vornet_ptr, __pyx_k_c_vornet_ptr, sizeof(__pyx_k_c_vornet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_vornetptr, __pyx_k_c_vornetptr, sizeof(__pyx_k_c_vornetptr), 0, 0, 1, 1},
  {&__pyx_n_s_calc_pore_size_distribution, __pyx_k_calc_pore_size_distribution, sizeof(__pyx_k_calc_pore_size_distribution), 0, 0, 1, 1},
  {&__pyx_n_s_centroid_list, __pyx_k_centroid_list, sizeof(__pyx_k_centroid_list), 0, 0, 1, 1},
  {&__pyx_n_s_channel_radius, __pyx_k_channel_radius, sizeof(__pyx_k_channel_radius), 0, 0, 1, 1},
  {&__pyx_n_s_chist_file, __pyx_k_chist_file, sizeof(__pyx_k_chist_file), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cnd_file, __pyx_k_cnd_file, sizeof(__pyx_k_cnd_file), 0, 0, 1, 1},
  {&__pyx_n_s_compute_centroid_4cycles, __pyx_k_compute_centroid_4cycles, sizeof(__pyx_k_compute_centroid_4cycles), 0, 0, 1, 1},
  {&__pyx_n_s_compute_face_centers, __pyx_k_compute_face_centers, sizeof(__pyx_k_compute_face_centers), 0, 0, 1, 1},
  {&__pyx_n_s_coords, __pyx_k_coords, sizeof(__pyx_k_coords), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cpnt_file, __pyx_k_cpnt_file, sizeof(__pyx_k_cpnt_file), 0, 0, 1, 1},
  {&__pyx_n_s_csph_file, __pyx_k_csph_file, sizeof(__pyx_k_csph_file), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff_radius, __pyx_k_cutoff_radius, sizeof(__pyx_k_cutoff_radius), 0, 0, 1, 1},
  {&__pyx_n_s_cycles, __pyx_k_cycles, sizeof(__pyx_k_cycles), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_ecs, __pyx_k_ecs, sizeof(__pyx_k_ecs), 0, 0, 1, 1},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exclude_pockets, __pyx_k_exclude_pockets, sizeof(__pyx_k_exclude_pockets), 0, 0, 1, 1},
  {&__pyx_n_s_extended_output, __pyx_k_extended_output, sizeof(__pyx_k_extended_output), 0, 0, 1, 1},
  {&__pyx_n_s_fcs, __pyx_k_fcs, sizeof(__pyx_k_fcs), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_from_VoronoiNetwork, __pyx_k_from_VoronoiNetwork, sizeof(__pyx_k_from_VoronoiNetwork), 0, 0, 1, 1},
  {&__pyx_n_s_generate_simplified_highaccuracy, __pyx_k_generate_simplified_highaccuracy, sizeof(__pyx_k_generate_simplified_highaccuracy), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_nearest_largest_diameter_hig, __pyx_k_get_nearest_largest_diameter_hig, sizeof(__pyx_k_get_nearest_largest_diameter_hig), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ha_atmnet, __pyx_k_ha_atmnet, sizeof(__pyx_k_ha_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_ha_node_size, __pyx_k_ha_node_size, sizeof(__pyx_k_ha_node_size), 0, 0, 1, 1},
  {&__pyx_n_s_ha_vornet, __pyx_k_ha_vornet, sizeof(__pyx_k_ha_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_high_accuracy, __pyx_k_high_accuracy, sizeof(__pyx_k_high_accuracy), 0, 0, 1, 1},
  {&__pyx_n_s_high_accuracy_atmnet, __pyx_k_high_accuracy_atmnet, sizeof(__pyx_k_high_accuracy_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_high_accuracy_atomnet, __pyx_k_high_accuracy_atomnet, sizeof(__pyx_k_high_accuracy_atomnet), 0, 0, 1, 1},
  {&__pyx_n_s_high_dist_range, __pyx_k_high_dist_range, sizeof(__pyx_k_high_dist_range), 0, 0, 1, 1},
  {&__pyx_n_s_hist_file, __pyx_k_hist_file, sizeof(__pyx_k_hist_file), 0, 0, 1, 1},
  {&__pyx_n_s_id_set, __pyx_k_id_set, sizeof(__pyx_k_id_set), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_iit, __pyx_k_iit, sizeof(__pyx_k_iit), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initializeAtomCharacterTable, __pyx_k_initializeAtomCharacterTable, sizeof(__pyx_k_initializeAtomCharacterTable), 0, 0, 1, 1},
  {&__pyx_n_s_initializeAtomicNumberTable, __pyx_k_initializeAtomicNumberTable, sizeof(__pyx_k_initializeAtomicNumberTable), 0, 0, 1, 1},
  {&__pyx_n_s_initializeCovRadTable, __pyx_k_initializeCovRadTable, sizeof(__pyx_k_initializeCovRadTable), 0, 0, 1, 1},
  {&__pyx_n_s_initializeMassTable, __pyx_k_initializeMassTable, sizeof(__pyx_k_initializeMassTable), 0, 0, 1, 1},
  {&__pyx_n_s_initializeRadTable, __pyx_k_initializeRadTable, sizeof(__pyx_k_initializeRadTable), 0, 0, 1, 1},
  {&__pyx_n_s_isMetal, __pyx_k_isMetal, sizeof(__pyx_k_isMetal), 0, 0, 1, 1},
  {&__pyx_n_s_is_duplicate_perimeter_atoms, __pyx_k_is_duplicate_perimeter_atoms, sizeof(__pyx_k_is_duplicate_perimeter_atoms), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_lookupAtomicNumber, __pyx_k_lookupAtomicNumber, sizeof(__pyx_k_lookupAtomicNumber), 0, 0, 1, 1},
  {&__pyx_n_s_lookupCovRadius, __pyx_k_lookupCovRadius, sizeof(__pyx_k_lookupCovRadius), 0, 0, 1, 1},
  {&__pyx_n_s_lookupMass, __pyx_k_lookupMass, sizeof(__pyx_k_lookupMass), 0, 0, 1, 1},
  {&__pyx_n_s_lookupRadius, __pyx_k_lookupRadius, sizeof(__pyx_k_lookupRadius), 0, 0, 1, 1},
  {&__pyx_n_s_low_dist_range, __pyx_k_low_dist_range, sizeof(__pyx_k_low_dist_range), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mc_sampling_no, __pyx_k_mc_sampling_no, sizeof(__pyx_k_mc_sampling_no), 0, 0, 1, 1},
  {&__pyx_n_s_minRad, __pyx_k_minRad, sizeof(__pyx_k_minRad), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new_xyz, __pyx_k_new_xyz, sizeof(__pyx_k_new_xyz), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node_radii_file, __pyx_k_node_radii_file, sizeof(__pyx_k_node_radii_file), 0, 0, 1, 1},
  {&__pyx_n_s_node_size, __pyx_k_node_size, sizeof(__pyx_k_node_size), 0, 0, 1, 1},
  {&__pyx_n_s_objs, __pyx_k_objs, sizeof(__pyx_k_objs), 0, 0, 1, 1},
  {&__pyx_n_s_overlap_check_flag, __pyx_k_overlap_check_flag, sizeof(__pyx_k_overlap_check_flag), 0, 0, 1, 1},
  {&__pyx_n_s_perform_voronoi_decomposition, __pyx_k_perform_voronoi_decomposition, sizeof(__pyx_k_perform_voronoi_decomposition), 0, 0, 1, 1},
  {&__pyx_n_s_perform_voronoi_decomposition_lo, __pyx_k_perform_voronoi_decomposition_lo, sizeof(__pyx_k_perform_voronoi_decomposition_lo), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_points_file, __pyx_k_points_file, sizeof(__pyx_k_points_file), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_probeRad, __pyx_k_probeRad, sizeof(__pyx_k_probeRad), 0, 0, 1, 1},
  {&__pyx_n_s_probe_radius, __pyx_k_probe_radius, sizeof(__pyx_k_probe_radius), 0, 0, 1, 1},
  {&__pyx_n_s_prune_voronoi_network_close_node, __pyx_k_prune_voronoi_network_close_node, sizeof(__pyx_k_prune_voronoi_network_close_node), 0, 0, 1, 1},
  {&__pyx_n_s_pruned_highaccuracy_voronoi_netw, __pyx_k_pruned_highaccuracy_voronoi_netw, sizeof(__pyx_k_pruned_highaccuracy_voronoi_netw), 0, 0, 1, 1},
  {&__pyx_n_s_pruned_vornet, __pyx_k_pruned_vornet, sizeof(__pyx_k_pruned_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_pyzeo_extension, __pyx_k_pyzeo_extension, sizeof(__pyx_k_pyzeo_extension), 0, 0, 1, 1},
  {&__pyx_n_s_rad_file, __pyx_k_rad_file, sizeof(__pyx_k_rad_file), 0, 0, 1, 1},
  {&__pyx_n_s_rad_flag, __pyx_k_rad_flag, sizeof(__pyx_k_rad_flag), 0, 0, 1, 1},
  {&__pyx_n_s_radialFlag, __pyx_k_radialFlag, sizeof(__pyx_k_radialFlag), 0, 0, 1, 1},
  {&__pyx_n_s_radialflag, __pyx_k_radialflag, sizeof(__pyx_k_radialflag), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_readArcfile, __pyx_k_readArcfile, sizeof(__pyx_k_readArcfile), 0, 0, 1, 1},
  {&__pyx_n_s_readCiffile, __pyx_k_readCiffile, sizeof(__pyx_k_readCiffile), 0, 0, 1, 1},
  {&__pyx_n_s_readCssrfile, __pyx_k_readCssrfile, sizeof(__pyx_k_readCssrfile), 0, 0, 1, 1},
  {&__pyx_n_s_readCucfile, __pyx_k_readCucfile, sizeof(__pyx_k_readCucfile), 0, 0, 1, 1},
  {&__pyx_n_s_readMassTable, __pyx_k_readMassTable, sizeof(__pyx_k_readMassTable), 0, 0, 1, 1},
  {&__pyx_n_s_readRadTable, __pyx_k_readRadTable, sizeof(__pyx_k_readRadTable), 0, 0, 1, 1},
  {&__pyx_n_s_readV1file, __pyx_k_readV1file, sizeof(__pyx_k_readV1file), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_ARC, __pyx_k_read_from_ARC, sizeof(__pyx_k_read_from_ARC), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_CIF, __pyx_k_read_from_CIF, sizeof(__pyx_k_read_from_CIF), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_CSSR, __pyx_k_read_from_CSSR, sizeof(__pyx_k_read_from_CSSR), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_V1, __pyx_k_read_from_V1, sizeof(__pyx_k_read_from_V1), 0, 0, 1, 1},
  {&__pyx_n_s_red_vornet, __pyx_k_red_vornet, sizeof(__pyx_k_red_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reduced_highaccuracy_vornodes, __pyx_k_reduced_highaccuracy_vornodes, sizeof(__pyx_k_reduced_highaccuracy_vornodes), 0, 0, 1, 1},
  {&__pyx_n_s_ret_high_acc_atmnet, __pyx_k_ret_high_acc_atmnet, sizeof(__pyx_k_ret_high_acc_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_sa_str, __pyx_k_sa_str, sizeof(__pyx_k_sa_str), 0, 0, 1, 1},
  {&__pyx_n_s_saveVorCells, __pyx_k_saveVorCells, sizeof(__pyx_k_saveVorCells), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shift_x, __pyx_k_shift_x, sizeof(__pyx_k_shift_x), 0, 0, 1, 1},
  {&__pyx_n_s_shift_y, __pyx_k_shift_y, sizeof(__pyx_k_shift_y), 0, 0, 1, 1},
  {&__pyx_n_s_shift_z, __pyx_k_shift_z, sizeof(__pyx_k_shift_z), 0, 0, 1, 1},
  {&__pyx_n_s_simplify_highaccuracy_vornet, __pyx_k_simplify_highaccuracy_vornet, sizeof(__pyx_k_simplify_highaccuracy_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sphere_dist_file, __pyx_k_sphere_dist_file, sizeof(__pyx_k_sphere_dist_file), 0, 0, 1, 1},
  {&__pyx_kp_s_src_pyzeo_extension_pyx, __pyx_k_src_pyzeo_extension_pyx, sizeof(__pyx_k_src_pyzeo_extension_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_subNo, __pyx_k_subNo, sizeof(__pyx_k_subNo), 0, 0, 1, 1},
  {&__pyx_n_s_substituteSeed, __pyx_k_substituteSeed, sizeof(__pyx_k_substituteSeed), 0, 0, 1, 1},
  {&__pyx_n_s_substitute_atoms, __pyx_k_substitute_atoms, sizeof(__pyx_k_substitute_atoms), 0, 0, 1, 1},
  {&__pyx_n_s_substitutionNo, __pyx_k_substitutionNo, sizeof(__pyx_k_substitutionNo), 0, 0, 1, 1},
  {&__pyx_n_s_supercell_flag, __pyx_k_supercell_flag, sizeof(__pyx_k_supercell_flag), 0, 0, 1, 1},
  {&__pyx_n_s_surface_area, __pyx_k_surface_area, sizeof(__pyx_k_surface_area), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_atmnet, __pyx_k_tmp_atmnet, sizeof(__pyx_k_tmp_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_vis_flag, __pyx_k_vis_flag, sizeof(__pyx_k_vis_flag), 0, 0, 1, 1},
  {&__pyx_n_s_vol_str, __pyx_k_vol_str, sizeof(__pyx_k_vol_str), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_vornet, __pyx_k_vornet, sizeof(__pyx_k_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_writeCiffile, __pyx_k_writeCiffile, sizeof(__pyx_k_writeCiffile), 0, 0, 1, 1},
  {&__pyx_n_s_writeCssrfile, __pyx_k_writeCssrfile, sizeof(__pyx_k_writeCssrfile), 0, 0, 1, 1},
  {&__pyx_n_s_writeMopacfile, __pyx_k_writeMopacfile, sizeof(__pyx_k_writeMopacfile), 0, 0, 1, 1},
  {&__pyx_n_s_writeNt2file, __pyx_k_writeNt2file, sizeof(__pyx_k_writeNt2file), 0, 0, 1, 1},
  {&__pyx_n_s_writeV1file, __pyx_k_writeV1file, sizeof(__pyx_k_writeV1file), 0, 0, 1, 1},
  {&__pyx_n_s_writeVtkfile, __pyx_k_writeVtkfile, sizeof(__pyx_k_writeVtkfile), 0, 0, 1, 1},
  {&__pyx_n_s_writeXyzfile, __pyx_k_writeXyzfile, sizeof(__pyx_k_writeXyzfile), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xyz_list, __pyx_k_xyz_list, sizeof(__pyx_k_xyz_list), 0, 0, 1, 1},
  {&__pyx_n_s_xyz_vect, __pyx_k_xyz_vect, sizeof(__pyx_k_xyz_vect), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(1, 223, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 682, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pyzeo/extension.pyx":1344
 *     """
 *     if not accuracy_setting in _accuracy_kw:
 *         raise ValueError("Accuracy setting not understood")             # <<<<<<<<<<<<<<
 *     cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *     if isinstance(accuracy_setting, unicode):
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Accuracy_setting_not_understood); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pyzeo/extension.pyx":76
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_initializeRadTable, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(1, 76, __pyx_L1_error)

  /* "pyzeo/extension.pyx":82
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_initializeCovRadTable, 82, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 82, __pyx_L1_error)

  /* "pyzeo/extension.pyx":88
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_initializeMassTable, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 88, __pyx_L1_error)

  /* "pyzeo/extension.pyx":94
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_initializeAtomCharacterTable, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 94, __pyx_L1_error)

  /* "pyzeo/extension.pyx":100
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_initializeAtomicNumberTable, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(1, 100, __pyx_L1_error)

  /* "pyzeo/extension.pyx":106
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readRadTable, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 106, __pyx_L1_error)

  /* "pyzeo/extension.pyx":115
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readMassTable, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 115, __pyx_L1_error)

  /* "pyzeo/extension.pyx":124
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_element, __pyx_n_s_radius); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_lookupRadius, 124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(1, 124, __pyx_L1_error)

  /* "pyzeo/extension.pyx":137
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_element); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_lookupCovRadius, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(1, 137, __pyx_L1_error)

  /* "pyzeo/extension.pyx":140
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_n_s_element); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_lookupMass, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 140, __pyx_L1_error)

  /* "pyzeo/extension.pyx":143
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_element); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_lookupAtomicNumber, 143, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(1, 143, __pyx_L1_error)

  /* "pyzeo/extension.pyx":146
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_n_s_element); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_isMetal, 146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(1, 146, __pyx_L1_error)

  /* "pyzeo/extension.pyx":162
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 */
  __pyx_tuple__45 = PyTuple_Pack(19, __pyx_n_s_atmnet, __pyx_n_s_channel_radius, __pyx_n_s_probe_radius, __pyx_n_s_mc_sampling_no, __pyx_n_s_hist_file, __pyx_n_s_high_accuracy, __pyx_n_s_exclude_pockets, __pyx_n_s_points_file, __pyx_n_s_node_radii_file, __pyx_n_s_sphere_dist_file, __pyx_n_s_vis_flag, __pyx_n_s_overlap_check_flag, __pyx_n_s_atmnet_copy, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_c_atmnetcp_ptr, __pyx_n_s_chist_file, __pyx_n_s_cpnt_file, __pyx_n_s_cnd_file, __pyx_n_s_csph_file); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(12, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_calc_pore_size_distribution, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(1, 162, __pyx_L1_error)

  /* "pyzeo/extension.pyx":208
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_radialflag, __pyx_n_s_atmnet, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readCiffile, 208, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(1, 208, __pyx_L1_error)

  /* "pyzeo/extension.pyx":217
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__49 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_radialflag, __pyx_n_s_atmnet, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readArcfile, 217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 217, __pyx_L1_error)

  /* "pyzeo/extension.pyx":226
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__51 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_radialflag, __pyx_n_s_atmnet, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readCucfile, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(1, 226, __pyx_L1_error)

  /* "pyzeo/extension.pyx":235
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__53 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_radialflag, __pyx_n_s_atmnet, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readCssrfile, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(1, 235, __pyx_L1_error)

  /* "pyzeo/extension.pyx":244
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__55 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_radialflag, __pyx_n_s_atmnet, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_readV1file, 244, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 244, __pyx_L1_error)

  /* "pyzeo/extension.pyx":253
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeCssrfile, 253, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 253, __pyx_L1_error)

  /* "pyzeo/extension.pyx":261
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeCiffile, 261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(1, 261, __pyx_L1_error)

  /* "pyzeo/extension.pyx":269
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__61 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeV1file, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 269, __pyx_L1_error)

  /* "pyzeo/extension.pyx":277
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_filename, __pyx_n_s_vornet, __pyx_n_s_minRad, __pyx_n_s_c_filename, __pyx_n_s_c_vornet_ptr); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeNt2file, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 277, __pyx_L1_error)

  /* "pyzeo/extension.pyx":289
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__65 = PyTuple_Pack(6, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_supercell_flag, __pyx_n_s_is_duplicate_perimeter_atoms, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeXyzfile, 289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 289, __pyx_L1_error)

  /* "pyzeo/extension.pyx":298
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__67 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeVtkfile, 298, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 298, __pyx_L1_error)

  /* "pyzeo/extension.pyx":306
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_tuple__69 = PyTuple_Pack(5, __pyx_n_s_filename, __pyx_n_s_atmnet, __pyx_n_s_supercell_flag, __pyx_n_s_c_filename, __pyx_n_s_c_atmnet); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_writeMopacfile, 306, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 306, __pyx_L1_error)

  /* "pyzeo/extension.pyx":897
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */
  __pyx_tuple__71 = PyTuple_Pack(7, __pyx_n_s_atmnet, __pyx_n_s_substituteSeed, __pyx_n_s_radialFlag, __pyx_n_s_substitutionNo, __pyx_n_s_atmnet_copy, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_subNo); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_substitute_atoms, 897, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 897, __pyx_L1_error)

  /* "pyzeo/extension.pyx":985
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
 */
  __pyx_tuple__73 = PyTuple_Pack(9, __pyx_n_s_vornet, __pyx_n_s_c_vornet_ptr, __pyx_n_s_cycles, __pyx_n_s_ids, __pyx_n_s_centroid_list, __pyx_n_s_it, __pyx_n_s_iit, __pyx_n_s_new_xyz, __pyx_n_s_id_set); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_compute_centroid_4cycles, 985, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 985, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1020
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
 */
  __pyx_tuple__75 = PyTuple_Pack(3, __pyx_n_s_atmnet, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_points); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_compute_face_centers, 1020, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 1020, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1030
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_n_s_objs); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_warning, 1030, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 1030, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1034
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
 */
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_s_atmnet, __pyx_n_s_c_atmnetptr); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_simplify_highaccuracy_vornet, 1034, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 1034, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1042
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
 */
  __pyx_tuple__81 = PyTuple_Pack(6, __pyx_n_s_atmnet, __pyx_n_s_c_atmnetptr, __pyx_n_s_xyz_vect, __pyx_n_s_xyz_list, __pyx_n_s_it, __pyx_n_s_new_xyz); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_reduced_highaccuracy_vornodes, 1042, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(1, 1042, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1061
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
 */
  __pyx_tuple__83 = PyTuple_Pack(9, __pyx_n_s_atmnet, __pyx_n_s_delta, __pyx_n_s_ha_atmnet, __pyx_n_s_vornet, __pyx_n_s_ecs, __pyx_n_s_fcs, __pyx_n_s_c_atmnetptr, __pyx_n_s_c_ha_atmnetptr, __pyx_n_s_c_vornetptr); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_pruned_highaccuracy_voronoi_netw, 1061, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 1061, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1076
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
 */
  __pyx_tuple__85 = PyTuple_Pack(10, __pyx_n_s_atmnet, __pyx_n_s_delta, __pyx_n_s_ha_vornet, __pyx_n_s_vornet, __pyx_n_s_ecs, __pyx_n_s_fcs, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_c_vornet_ptr, __pyx_n_s_c_ha_vornet_ptr, __pyx_n_s_red_vornet); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_get_nearest_largest_diameter_hig, 1076, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(1, 1076, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1106
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
 */
  __pyx_tuple__87 = PyTuple_Pack(9, __pyx_n_s_atmnet, __pyx_n_s_delta, __pyx_n_s_ha_atmnet, __pyx_n_s_vornet, __pyx_n_s_ecs, __pyx_n_s_fcs, __pyx_n_s_ha_vornet, __pyx_n_s_node_size, __pyx_n_s_ha_node_size); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_generate_simplified_highaccuracy, 1106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 1106, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1160
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
 */
  __pyx_tuple__89 = PyTuple_Pack(13, __pyx_n_s_atmnet, __pyx_n_s_delta, __pyx_n_s_ha_atmnet, __pyx_n_s_vornet, __pyx_n_s_ecs, __pyx_n_s_fcs, __pyx_n_s_ha_vornet, __pyx_n_s_node_size, __pyx_n_s_ha_node_size, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_c_ha_vornet_ptr, __pyx_n_s_red_vornet, __pyx_n_s_pruned_vornet); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_prune_voronoi_network_close_node, 1160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 1160, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1199
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 */
  __pyx_tuple__91 = PyTuple_Pack(14, __pyx_n_s_atmnet, __pyx_n_s_channel_radius, __pyx_n_s_probe_radius, __pyx_n_s_mc_sampling_no, __pyx_n_s_high_accuracy, __pyx_n_s_high_accuracy_atmnet, __pyx_n_s_exclude_pockets, __pyx_n_s_low_dist_range, __pyx_n_s_high_dist_range, __pyx_n_s_ret_high_acc_atmnet, __pyx_n_s_c_org_atmnet_ptr, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_tmp_atmnet, __pyx_n_s_vol_str); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(1, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(9, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_volume, 1199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 1199, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1263
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
 */
  __pyx_tuple__93 = PyTuple_Pack(13, __pyx_n_s_atmnet, __pyx_n_s_channel_radius, __pyx_n_s_probe_radius, __pyx_n_s_mc_sampling_no, __pyx_n_s_high_accuracy, __pyx_n_s_high_accuracy_atmnet, __pyx_n_s_exclude_pockets, __pyx_n_s_extended_output, __pyx_n_s_ret_high_acc_atmnet, __pyx_n_s_c_org_atmnet_ptr, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_tmp_atmnet, __pyx_n_s_sa_str); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(8, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_surface_area, 1263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 1263, __pyx_L1_error)

  /* "pyzeo/extension.pyx":1327
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
 */
  __pyx_tuple__95 = PyTuple_Pack(4, __pyx_n_s_atmnet, __pyx_n_s_accuracy_setting, __pyx_n_s_c_atmnetptr, __pyx_n_s_acc_set); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyzeo_extension_pyx, __pyx_n_s_high_accuracy_atomnet, 1327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_float_0_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_25 = PyFloat_FromDouble(0.25); if (unlikely(!__pyx_float_0_25)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_Xyz) < 0) __PYX_ERR(1, 14, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_Xyz.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_Xyz.tp_dictoffset && __pyx_type_5pyzeo_9extension_Xyz.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_Xyz.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Xyz, (PyObject *)&__pyx_type_5pyzeo_9extension_Xyz) < 0) __PYX_ERR(1, 14, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_Xyz) < 0) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_Xyz = &__pyx_type_5pyzeo_9extension_Xyz;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_Point) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_Point.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_Point.tp_dictoffset && __pyx_type_5pyzeo_9extension_Point.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_Point.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Point, (PyObject *)&__pyx_type_5pyzeo_9extension_Point) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_Point) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_Point = &__pyx_type_5pyzeo_9extension_Point;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_Channel) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_Channel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_Channel.tp_dictoffset && __pyx_type_5pyzeo_9extension_Channel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_Channel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Channel, (PyObject *)&__pyx_type_5pyzeo_9extension_Channel) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_Channel) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_Channel = &__pyx_type_5pyzeo_9extension_Channel;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_Atom) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_Atom.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_Atom.tp_dictoffset && __pyx_type_5pyzeo_9extension_Atom.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_Atom.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Atom, (PyObject *)&__pyx_type_5pyzeo_9extension_Atom) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_Atom) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_Atom = &__pyx_type_5pyzeo_9extension_Atom;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_AtomNetwork) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_AtomNetwork.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_AtomNetwork.tp_dictoffset && __pyx_type_5pyzeo_9extension_AtomNetwork.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_AtomNetwork.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AtomNetwork, (PyObject *)&__pyx_type_5pyzeo_9extension_AtomNetwork) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_AtomNetwork) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_AtomNetwork = &__pyx_type_5pyzeo_9extension_AtomNetwork;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_VoronoiNode) < 0) __PYX_ERR(1, 747, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_VoronoiNode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_VoronoiNode.tp_dictoffset && __pyx_type_5pyzeo_9extension_VoronoiNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_VoronoiNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VoronoiNode, (PyObject *)&__pyx_type_5pyzeo_9extension_VoronoiNode) < 0) __PYX_ERR(1, 747, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_VoronoiNode) < 0) __PYX_ERR(1, 747, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_VoronoiNode = &__pyx_type_5pyzeo_9extension_VoronoiNode;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_VoronoiNetwork) < 0) __PYX_ERR(1, 779, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_VoronoiNetwork.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_VoronoiNetwork.tp_dictoffset && __pyx_type_5pyzeo_9extension_VoronoiNetwork.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_VoronoiNetwork.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VoronoiNetwork, (PyObject *)&__pyx_type_5pyzeo_9extension_VoronoiNetwork) < 0) __PYX_ERR(1, 779, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_VoronoiNetwork) < 0) __PYX_ERR(1, 779, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_VoronoiNetwork = &__pyx_type_5pyzeo_9extension_VoronoiNetwork;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_DijkstraNetwork) < 0) __PYX_ERR(1, 929, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_DijkstraNetwork.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_DijkstraNetwork.tp_dictoffset && __pyx_type_5pyzeo_9extension_DijkstraNetwork.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_DijkstraNetwork.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DijkstraNetwork, (PyObject *)&__pyx_type_5pyzeo_9extension_DijkstraNetwork) < 0) __PYX_ERR(1, 929, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_DijkstraNetwork) < 0) __PYX_ERR(1, 929, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_DijkstraNetwork = &__pyx_type_5pyzeo_9extension_DijkstraNetwork;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_VorFace) < 0) __PYX_ERR(2, 289, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_VorFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_VorFace.tp_dictoffset && __pyx_type_5pyzeo_9extension_VorFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_VorFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VorFace, (PyObject *)&__pyx_type_5pyzeo_9extension_VorFace) < 0) __PYX_ERR(2, 289, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_VorFace = &__pyx_type_5pyzeo_9extension_VorFace;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_VorCell) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_VorCell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_VorCell.tp_dictoffset && __pyx_type_5pyzeo_9extension_VorCell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_VorCell.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VorCell, (PyObject *)&__pyx_type_5pyzeo_9extension_VorCell) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_VorCell) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_VorCell = &__pyx_type_5pyzeo_9extension_VorCell;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_BasicVCell) < 0) __PYX_ERR(1, 972, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_BasicVCell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_BasicVCell.tp_dictoffset && __pyx_type_5pyzeo_9extension_BasicVCell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_BasicVCell.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BasicVCell, (PyObject *)&__pyx_type_5pyzeo_9extension_BasicVCell) < 0) __PYX_ERR(1, 972, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5pyzeo_9extension_BasicVCell) < 0) __PYX_ERR(1, 972, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_BasicVCell = &__pyx_type_5pyzeo_9extension_BasicVCell;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension_Cycle) < 0) __PYX_ERR(2, 313, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension_Cycle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension_Cycle.tp_dictoffset && __pyx_type_5pyzeo_9extension_Cycle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension_Cycle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Cycle, (PyObject *)&__pyx_type_5pyzeo_9extension_Cycle) < 0) __PYX_ERR(2, 313, __pyx_L1_error)
  __pyx_ptype_5pyzeo_9extension_Cycle = &__pyx_type_5pyzeo_9extension_Cycle;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition) < 0) __PYX_ERR(1, 657, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition.tp_dictoffset && __pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition = &__pyx_type_5pyzeo_9extension___pyx_scope_struct__perform_voronoi_decomposition;
  if (PyType_Ready(&__pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 690, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5pyzeo_9extension___pyx_scope_struct_1_genexpr = &__pyx_type_5pyzeo_9extension___pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initextension(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initextension(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_extension(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_extension(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_extension(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'extension' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_extension(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("extension", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyzeo__extension) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyzeo.extension")) {
      if (unlikely(PyDict_SetItemString(modules, "pyzeo.extension", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "pyzeo/extension.pyx":6
 * # distutils: sources = src/graphstorage.cc
 * 
 * import sys             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":76
 * # netinfo
 * #Python definitions for the cdefinitions in .pxd file
 * def initializeRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic radius table with Zeo++ default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_1initializeRadTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initializeRadTable, __pyx_t_1) < 0) __PYX_ERR(1, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":82
 *     zeo_initializeRadTable()
 * 
 * def initializeCovRadTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the covalent tradius table with Zeo++ default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_3initializeCovRadTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initializeCovRadTable, __pyx_t_1) < 0) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":88
 *     zeo_initializeCovRadTable()
 * 
 * def initializeMassTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic mass table with Zeo++ default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_5initializeMassTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initializeMassTable, __pyx_t_1) < 0) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":94
 *     zeo_initializeMassTable()
 * 
 * def initializeAtomCharacterTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the Atom symbol table with Zeo++ default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_7initializeAtomCharacterTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initializeAtomCharacterTable, __pyx_t_1) < 0) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":100
 *     zeo_initializeAtomCharacterTable()
 * 
 * def initializeAtomicNumberTable():             # <<<<<<<<<<<<<<
 *     """
 *     Populate the atomic number table with Zeo++ default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_9initializeAtomicNumberTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initializeAtomicNumberTable, __pyx_t_1) < 0) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":106
 *     zeo_initializeAtomicNumberTable()
 * 
 * def readRadTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic radii values from input file and replace the default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_11readRadTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readRadTable, __pyx_t_1) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":115
 *     zeo_readRadTable(c_filename)
 * 
 * def readMassTable(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read atomic mass values from input file and replace the default values
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_13readMassTable, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readMassTable, __pyx_t_1) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":124
 *     zeo_readMassTable(c_filename)
 * 
 * def lookupRadius(element):             # <<<<<<<<<<<<<<
 *     """"
 *     Args:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_15lookupRadius, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lookupRadius, __pyx_t_1) < 0) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":137
 *     return radius
 * 
 * def lookupCovRadius(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupCovRadius(element)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_17lookupCovRadius, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lookupCovRadius, __pyx_t_1) < 0) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":140
 *     return zeo_lookupCovRadius(element)
 * 
 * def lookupMass(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupMass(element)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_19lookupMass, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lookupMass, __pyx_t_1) < 0) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":143
 *     return zeo_lookupMass(element)
 * 
 * def lookupAtomicNumber(element):             # <<<<<<<<<<<<<<
 *     return zeo_lookupAtomicNumber(element)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_21lookupAtomicNumber, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lookupAtomicNumber, __pyx_t_1) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":146
 *     return zeo_lookupAtomicNumber(element)
 * 
 * def isMetal(element):             # <<<<<<<<<<<<<<
 *     return zeo_isMetal(element)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_23isMetal, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isMetal, __pyx_t_1) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":162
 * #=============================================================================
 * # psd
 * def calc_pore_size_distribution(atmnet,  channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, hist_file, high_accuracy=False, exclude_pockets=False,
 *         points_file="", node_radii_file="", sphere_dist_file="",
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_25calc_pore_size_distribution, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calc_pore_size_distribution, __pyx_t_1) < 0) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":208
 * #=============================================================================
 * # netio
 * def readCiffile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_27readCiffile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readCiffile, __pyx_t_1) < 0) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":217
 *     return atmnet
 * 
 * def readArcfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_29readArcfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readArcfile, __pyx_t_1) < 0) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":226
 *     return atmnet
 * 
 * def readCucfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_31readCucfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readCucfile, __pyx_t_1) < 0) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":235
 *     return atmnet
 * 
 * def readCssrfile(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_33readCssrfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readCssrfile, __pyx_t_1) < 0) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":244
 *     return atmnet
 * 
 * def readV1file(filename, radialflag):             # <<<<<<<<<<<<<<
 *     atmnet = AtomNetwork()
 *     if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_35readV1file, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readV1file, __pyx_t_1) < 0) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":253
 *     return atmnet
 * 
 * def writeCssrfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_37writeCssrfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeCssrfile, __pyx_t_1) < 0) __PYX_ERR(1, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":261
 *         raise IOError
 * 
 * def writeCiffile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_39writeCiffile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeCiffile, __pyx_t_1) < 0) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":269
 *         raise IOError
 * 
 * def writeV1file(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_41writeV1file, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeV1file, __pyx_t_1) < 0) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":277
 *         raise IOError
 * 
 * def writeNt2file(filename, vornet, minRad = None):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_43writeNt2file, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeNt2file, __pyx_t_1) < 0) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":289
 *             raise IOError
 * 
 * def writeXyzfile(filename, atmnet, supercell_flag, is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_45writeXyzfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeXyzfile, __pyx_t_1) < 0) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":298
 *         raise IOError
 * 
 * def writeVtkfile(filename, atmnet):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_47writeVtkfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeVtkfile, __pyx_t_1) < 0) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":306
 *         raise IOError
 * 
 * def writeMopacfile(filename, atmnet, supercell_flag):             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_49writeMopacfile, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeMopacfile, __pyx_t_1) < 0) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":391
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_n_s_read_from_CIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pyzeo/extension.pyx":390
 *     #            rel_point.vals[2])
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_dict, __pyx_n_s_read_from_CIF, __pyx_t_2) < 0) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_AtomNetwork);

  /* "pyzeo/extension.pyx":430
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_n_s_read_from_ARC); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyzeo/extension.pyx":429
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_dict, __pyx_n_s_read_from_ARC, __pyx_t_1) < 0) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_AtomNetwork);

  /* "pyzeo/extension.pyx":469
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_n_s_read_from_CSSR); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pyzeo/extension.pyx":468
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_dict, __pyx_n_s_read_from_CSSR, __pyx_t_2) < 0) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_AtomNetwork);

  /* "pyzeo/extension.pyx":509
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork, __pyx_n_s_read_from_V1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyzeo/extension.pyx":508
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_AtomNetwork->tp_dict, __pyx_n_s_read_from_V1, __pyx_t_1) < 0) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_AtomNetwork);

  /* "pyzeo/extension.pyx":861
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pyzeo/extension.pyx":860
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_VoronoiNetwork->tp_dict, __pyx_n_s_perform_voronoi_decomposition, __pyx_t_2) < 0) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_VoronoiNetwork);

  /* "pyzeo/extension.pyx":897
 *         return vornet
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_51substitute_atoms, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_substitute_atoms, __pyx_t_2) < 0) __PYX_ERR(1, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyzeo/extension.pyx":937
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod
 *     def from_VoronoiNetwork(vornet):             # <<<<<<<<<<<<<<
 *         """
 *         Build Dijkstra Net from input Voronoi Net
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5pyzeo_9extension_DijkstraNetwork, __pyx_n_s_from_VoronoiNetwork); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyzeo/extension.pyx":936
 *     def __cinit__(self):
 *         self.thisptr = new DIJKSTRA_NETWORK()
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_VoronoiNetwork(vornet):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pyzeo_9extension_DijkstraNetwork->tp_dict, __pyx_n_s_from_VoronoiNetwork, __pyx_t_1) < 0) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5pyzeo_9extension_DijkstraNetwork);

  /* "pyzeo/extension.pyx":985
 * #=============================================================================
 * # cycle
 * def compute_centroid_4cycles(vornet):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the centroid of the 4 corners of quadrilateral voronoi face
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_53compute_centroid_4cycles, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_centroid_4cycles, __pyx_t_1) < 0) __PYX_ERR(1, 985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1020
 *     return centroid_list
 * 
 * def compute_face_centers(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the face centers of the voronoi network
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_55compute_face_centers, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_face_centers, __pyx_t_1) < 0) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1030
 * #=============================================================================
 * # cluster
 * def warning(*objs):             # <<<<<<<<<<<<<<
 *     print("WARNING", *objs)
 * #    print("WARNING", *objs, file=sys.stderr)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_57warning, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warning, __pyx_t_1) < 0) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1034
 * #    print("WARNING", *objs, file=sys.stderr)
 * 
 * def simplify_highaccuracy_vornet(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates and simplifies high accuracy voronoi network
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_59simplify_highaccuracy_vornet, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_simplify_highaccuracy_vornet, __pyx_t_1) < 0) __PYX_ERR(1, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1042
 * 
 * 
 * def reduced_highaccuracy_vornodes(atmnet):             # <<<<<<<<<<<<<<
 *     """
 *     Generates simplified hgh accuracy voronoi network
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_61reduced_highaccuracy_vornodes, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduced_highaccuracy_vornodes, __pyx_t_1) < 0) __PYX_ERR(1, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1061
 * 
 * 
 * def pruned_highaccuracy_voronoi_network(atmnet, delta=0.5):             # <<<<<<<<<<<<<<
 *     """
 *     Prunes hgh accuracy voronoi network by removing voronoi
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_63pruned_highaccuracy_voronoi_network, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pruned_highaccuracy_voronoi_netw, __pyx_t_1) < 0) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1076
 *     return vornet
 * 
 * def get_nearest_largest_diameter_highaccuracy_vornode( atmnet, delta=0.25):             # <<<<<<<<<<<<<<
 *     """
 *     Get the reduced high accuracy voronoi network where only nodes that
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_65get_nearest_largest_diameter_highaccuracy_vornode, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_nearest_largest_diameter_hig, __pyx_t_1) < 0) __PYX_ERR(1, 1076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1106
 *     return red_vornet
 * 
 * def generate_simplified_highaccuracy_voronoi_network(atmnet,delta=0.6):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a simplified high accuracy voronoi network.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_67generate_simplified_highaccuracy_voronoi_network, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generate_simplified_highaccuracy, __pyx_t_1) < 0) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1160
 *     #print '********SIMPLIFIED_VORNET_COMPLETE*******'
 * 
 * def prune_voronoi_network_close_node(atmnet,delta=0.1):             # <<<<<<<<<<<<<<
 *     """
 *     Generate a pruned high accuracy voronoi network.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_69prune_voronoi_network_close_node, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune_voronoi_network_close_node, __pyx_t_1) < 0) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1199
 * #=============================================================================
 * # area_volume
 * def volume(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, low_dist_range=-1, high_dist_range=-1):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_71volume, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_volume, __pyx_t_1) < 0) __PYX_ERR(1, 1199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1263
 *     #        print fields[1], fields[3]
 * 
 * def surface_area(atmnet, channel_radius, probe_radius,             # <<<<<<<<<<<<<<
 *         mc_sampling_no, high_accuracy=False, high_accuracy_atmnet=None,
 *         exclude_pockets=True, extended_output=False):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_73surface_area, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_surface_area, __pyx_t_1) < 0) __PYX_ERR(1, 1263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1324
 * # high_accuracy
 * _accuracy_kw = {
 *         "OCC","FCC","ACC","AQC","DDH","TIH","ICH","ICC","RIH","S4","S10","S20",             # <<<<<<<<<<<<<<
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_OCC) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_FCC) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_ACC) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_AQC) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_DDH) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_TIH) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_ICH) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_ICC) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_RIH) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S4) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S10) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S20) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S30) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S40) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S50) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S100) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S500) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S1000) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_S10000) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_DEF) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_HI) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_MED) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_LOW) < 0) __PYX_ERR(1, 1324, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_accuracy_kw, __pyx_t_1) < 0) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1327
 *         "S30","S40","S50","S100","S500","S1000","S10000","DEF","HI","MED","LOW"
 *         }
 * def high_accuracy_atomnet(atmnet, accuracy_setting="LOW"):             # <<<<<<<<<<<<<<
 *     """
 *     Increases the accuracy of voronoi decomposition by replacing big
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5pyzeo_9extension_75high_accuracy_atomnet, NULL, __pyx_n_s_pyzeo_extension); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_high_accuracy_atomnet, __pyx_t_1) < 0) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyzeo/extension.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = src/networkinfo.cc
 * # distutils: sources = src/networkio.cc
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyzeo.extension", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyzeo.extension");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
